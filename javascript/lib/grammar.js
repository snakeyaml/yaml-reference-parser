// Generated by CoffeeScript 2.5.1
(function() {
  var Grammar;

  global.Grammar = Grammar = (function() {
    var anchor_character, anchor_name, ascii_alpha_character_s, blank_character, byte_order_mark, comment_content, decimal_digit, decimal_digit_s, directive_name, directive_parameter, document_end_indicator, document_start_indicator, double_quoted_scalar_escape_character, end_of_file, flow_collection_indicator, flow_collection_indicator_s, global_tag_prefix, hexadecimal_digit, i, i004, i051, i083, i084, i091, i092, i093, i094, i095, i096, i118b, i119, i123, i127, i128, i130, i131, i132, i133, i135, i136, i139, i140, i142, i143, i145, i146, i147, i148, i149, i150, i151, i152, i153, i154, i155, i156, i157, i158, i159, i160, i161, i162, i163, i164, init, json_character, l_comment, len, line_break, line_ending, local_tag_prefix, named_tag_handle, non_break_character, non_break_double_quoted_character, non_break_single_quoted_character, non_space_character, non_space_double_quoted_character, non_space_single_quoted_character, non_specific_tag, primary_tag_handle, r, re_break_as_line_feed, re_break_as_space, re_decimal_digit_1_9, re_document_end_indicator, re_document_start_indicator, re_l_comment, re_line_break, re_line_ending, re_line_trail_comments, re_non_break_character, re_non_space_character, re_non_space_double_quoted_character, re_separation_blanks, re_single_quoted_first_line, re_single_quoted_next_line, re_single_quoted_one_line, re_tag_handle, re_ws_lookahead, ref, secondary_tag_handle, separation_blanks, shorthand_tag, single_quoted_escaped_single_quote, single_quoted_first_line, space_character, start_of_line, tag_char, tag_handle, uri_character, verbatim_tag, word_character, word_character_s, ws_lookahead, yaml_character;

    class Grammar {
      // Grammar rules:
      TOP() {
        return this.yaml_stream;
      }

      // [001]
      // yaml-stream ::=
      //   document-prefix*
      //   any-document?
      //   (
      //       (
      //         document-suffix+
      //         document-prefix*
      //         any-document?
      //       )
      //     | byte-order-mark
      //     | comment-line
      //     | start-indicator-and-document
      //   )*
      yaml_stream() {
        return this.all(this.document_prefix, this.rep(0, 1, this.any_document), this.rep(0, null, this.any(this.all(this.document_suffix, this.rep(0, null, this.document_prefix), this.rep(0, 1, this.any_document)), this.all(this.document_prefix, this.rep(0, 1, this.start_indicator_and_document)))));
      }

      // [002]
      // document-prefix ::=
      //   byte-order-mark?
      //   comment-line*

        // TODO
      //   re_document_prefix = ''

      //   i002 = ->
      //     [, re_document_prefix] = r ///
      //       #{byte_order_mark}?
      //       #{l_comment}*
      //     ///u
      document_prefix() {
        //     @rgx(re_document_prefix)
        return this.all(this.rep(0, 1, this.chr(byte_order_mark)), this.rep(0, null, this.comment_line));
      }

      // [003]
      // document-suffix ::=
      //   document-end-indicator
      //   comment-lines
      document_suffix() {
        return this.all(this.document_end_indicator, this.comment_lines);
      }

      document_start_indicator() {
        return this.rgx(re_document_start_indicator);
      }

      document_end_indicator() {
        return this.rgx(re_document_end_indicator);
      }

      // [006]
      // any-document ::=
      //     directives-and-document
      //   | start-indicator-and-document
      //   | bare-document
      any_document() {
        return this.any(this.directives_and_document, this.start_indicator_and_document, this.bare_document);
      }

      // [007]
      // directives-and-document ::=
      //   directive-line+
      //   start-indicator-and-document
      directives_and_document() {
        return this.all(this.rep(1, null, this.directive_line), this.start_indicator_and_document);
      }

      // [008]
      // start-indicator-and-document ::=
      //   document-start-indicator
      //   (
      //       bare-document
      //     | (
      //         empty-node
      //         comment-lines
      //       )
      //   )
      start_indicator_and_document() {
        return this.all(this.document_start_indicator, this.any(this.bare_document, this.all(this.empty_node, this.comment_lines)));
      }

      // [009]
      // bare-document ::=
      //   block-node(-1,BLOCK-IN)
      //   /* Excluding forbidden-content */
      bare_document() {
        return this.all(this.exclude(this.forbidden_content), [this.block_node, -1, "block-in"]);
      }

      // [010]
      // directive-line ::=
      //   '%'
      //   (
      //       yaml-directive-line
      //     | tag-directive-line
      //     | reserved-directive-line
      //   )
      //   comment-lines
      directive_line() {
        return this.all(this.chr('%'), this.any(this.yaml_directive_line, this.tag_directive_line, this.reserved_directive_line), this.comment_lines);
      }

      // [011]
      // forbidden-content ::=
      //   <start-of-line>
      //   (
      //       document-start-indicator
      //     | document-end-indicator
      //   )
      //   (
      //       line-ending
      //     | blank-character
      //   )
      forbidden_content() {
        return this.rgx(RegExp(`(?:${start_of_line // XXX slightly different than 1.3 spec
}(?:${document_start_indicator}|${document_end_indicator})(?:[\\x0A\\x0D]|${blank_character}|${end_of_file}))`, "y"));
      }

      // [012]
      // block-node(n,c) ::=
      //     block-node-in-a-block-node(n,c)
      //   | flow-node-in-a-block-node(n)
      block_node(n, c) {
        return this.any([this.block_node_in_a_block_node, n, c], [this.flow_node_in_a_block_node, n]);
      }

      // [013]
      // block-node-in-a-block-node(n,c) ::=
      //     block-scalar(n,c)
      //   | block-collection(n,c)
      block_node_in_a_block_node(n, c) {
        return this.any([this.block_scalar, n, c], [this.block_collection, n, c]);
      }

      // [014]
      // flow-node-in-a-block-node(n) ::=
      //   separation-characters(n+1,FLOW-OUT)
      //   flow-node(n+1,FLOW-OUT)
      //   comment-lines
      flow_node_in_a_block_node(n) {
        return this.all([this.separation_characters, n + 1, "flow-out"], [this.flow_node, n + 1, "flow-out"], this.comment_lines);
      }

      // [015]
      // block-collection(n,c) ::=
      //   (
      //     separation-characters(n+1,c)
      //     node-properties(n+1,c)
      //   )?
      //   comment-lines
      //   (
      //       block-sequence-context(n,c)
      //     | block-mapping(n)
      //   )
      block_collection(n, c) {
        // XXX Needed by receiver to get only a tag or anchor:
        return this.all(this.rep(0, 1, this.all([this.separation_characters, n + 1, c], this.any(this.all([this.node_properties, n + 1, c], this.comment_lines), this.all(this.tag_property, this.comment_lines), this.all(this.anchor_property, this.comment_lines)))), this.comment_lines, this.any([this.block_sequence_context, n, c], [this.block_mapping, n]));
      }

      // [016]
      // block-sequence-context(n,BLOCK-OUT) ::= block-sequence(n-1)
      // block-sequence-context(n,BLOCK-IN)  ::= block-sequence(n)
      block_sequence_context(n, c) {
        return this.case(c, {
          'block-out': [this.block_sequence, this.sub(n, 1)],
          'block-in': [this.block_sequence, n]
        });
      }

      // [017]
      // block-scalar(n,c) ::=
      //   separation-characters(n+1,c)
      //   (
      //     node-properties(n+1,c)
      //     separation-characters(n+1,c)
      //   )?
      //   (
      //       block-literal-scalar(n)
      //     | block-folded-scalar(n)
      //   )
      block_scalar(n, c) {
        return this.all([this.separation_characters, n + 1, c], this.rep(0, 1, this.all([this.node_properties, n + 1, c], [this.separation_characters, n + 1, c])), this.any([this.block_literal_scalar, n], [this.block_folded_scalar, n]));
      }

      // [018]
      // block-mapping(n) ::=
      //   (
      //     indentation-spaces(n+1+m)
      //     block-mapping-entry(n+1+m)
      //   )+
      block_mapping(n) {
        var m;
        if (!(m = this.call([this.auto_detect_indent, n], 'number'))) {
          return false;
        }
        return this.all(this.rep(1, null, this.all(this.indentation_spaces_n(n + m), [this.block_mapping_entry, n + m])));
      }

      // [019]
      // block-mapping-entry(n) ::=
      //     block-mapping-explicit-entry(n)
      //   | block-mapping-implicit-entry(n)
      block_mapping_entry(n) {
        return this.any([this.block_mapping_explicit_entry, n], [this.block_mapping_implicit_entry, n]);
      }

      // [020]
      // block-mapping-explicit-entry(n) ::=
      //   block-mapping-explicit-key(n)
      //   (
      //       block-mapping-explicit-value(n)
      //     | empty-node
      //   )
      block_mapping_explicit_entry(n) {
        return this.all([this.block_mapping_explicit_key, n], this.any([this.block_mapping_explicit_value, n], this.empty_node));
      }

      // [021]
      // block-mapping-explicit-key(n) ::=
      //   '?'                               # Not followed by non-ws char
      //   block-indented-node(n,BLOCK-OUT)
      block_mapping_explicit_key(n) {
        return this.all(this.rgx(RegExp(`\\?${ws_lookahead}`, "y")), [this.block_indented_node, n, "block-out"]);
      }

      // [022]
      // block-mapping-explicit-value(n) ::=
      //   indentation-spaces(n)
      //   ':'                               # Not followed by non-ws char
      //   block-indented-node(n,BLOCK-OUT)
      block_mapping_explicit_value(n) {
        return this.all(this.indentation_spaces_n(n), this.rgx(RegExp(`:${ws_lookahead}`, "y")), [this.block_indented_node, n, "block-out"]);
      }

      // [023]
      // block-mapping-implicit-entry(n) ::=
      //   (
      //       block-mapping-implicit-key
      //     | empty-node
      //   )
      //   block-mapping-implicit-value(n)
      block_mapping_implicit_entry(n) {
        return this.all(this.any(this.block_mapping_implicit_key, this.empty_node), [this.block_mapping_implicit_value, n]);
      }

      // XXX Can fold into 023
      // [024]
      // block-mapping-implicit-key ::=
      //     implicit-json-key(BLOCK-KEY)
      //   | implicit-yaml-key(BLOCK-KEY)
      block_mapping_implicit_key() {
        return this.any([this.implicit_json_key, "block-key"], [this.implicit_yaml_key, "block-key"]);
      }

      // [025]
      // block-mapping-implicit-value(n) ::=
      //   ':'                               # Not followed by non-ws char
      //   (
      //       block-node(n,BLOCK-OUT)
      //     | (
      //         empty-node
      //         comment-lines
      //       )
      //   )
      block_mapping_implicit_value(n) {
        return this.all(this.rgx(RegExp(`:${ws_lookahead}`, "y")), this.any([this.block_node, n, "block-out"], this.all(this.empty_node, this.comment_lines)));
      }

      // [026]
      // compact-mapping(n) ::=
      //   block-mapping-entry(n)
      //   (
      //     indentation-spaces(n)
      //     block-mapping-entry(n)
      //   )*
      compact_mapping(n) {
        return this.all([this.block_mapping_entry, n], this.rep(0, null, this.all(this.indentation_spaces_n(n), [this.block_mapping_entry, n])));
      }

      // [027]
      // block-sequence(n) ::=
      //   (
      //     indentation-spaces(n+1+m)
      //     block-sequence-entry(n+1+m)
      //   )+
      block_sequence(n) {
        var m;
        if (!(m = this.call([this.auto_detect_indent, n], 'number'))) {
          return false;
        }
        return this.all(this.rep(1, null, this.all(this.indentation_spaces_n(n + m), [this.block_sequence_entry, n + m])));
      }

      // [028]
      // block-sequence-entry(n) ::=
      //   '-'
      //   [ lookahead ≠ non-space-character ]
      //   block-indented-node(n,BLOCK-IN)
      block_sequence_entry(n) {
        return this.all(this.rgx(RegExp(`-${ws_lookahead}(?!${non_space_character})`, "yu")), [this.block_indented_node, n, "block-in"]);
      }

      // [029]
      // block-indented-node(n,c) ::=
      //     (
      //       indentation-spaces(m)
      //       (
      //           compact-sequence(n+1+m)
      //         | compact-mapping(n+1+m)
      //       )
      //     )
      //   | block-node(n,c)
      //   | (
      //       empty-node
      //       comment-lines
      //     )
      block_indented_node(n, c) {
        var m;
        m = this.call([this.auto_detect_indent, n], 'number');
        return this.any(this.all(this.indentation_spaces_n(m), this.any([this.compact_sequence, n + 1 + m], [this.compact_mapping, n + 1 + m])), [this.block_node, n, c], this.all(this.empty_node, this.comment_lines));
      }

      // [030]
      // compact-sequence(n) ::=
      //   block-sequence-entry(n)
      //   (
      //     indentation-spaces(n)
      //     block-sequence-entry(n)
      //   )*
      compact_sequence(n) {
        return this.all([this.block_sequence_entry, n], this.rep(0, null, this.all(this.indentation_spaces_n(n), [this.block_sequence_entry, n])));
      }

      // [031]
      // block-literal-scalar(n) ::=
      //   '|'
      //   block-scalar-indicators(t)
      //   literal-scalar-content(n+m,t)
      block_literal_scalar(n) {
        return this.all(this.chr('|'), [this.block_scalar_indicator, n], [this.literal_scalar_content, this.add(n, this.m()), this.t()]);
      }

      // [032]
      // literal-scalar-content(n,t) ::=
      //   (
      //     literal-scalar-line-content(n)
      //     literal-scalar-next-line(n)*
      //     block-scalar-chomp-last(t)
      //   )?
      //   block-scalar-chomp-empty(n,t)
      literal_scalar_content(n, t) {
        return this.all(this.rep(0, 1, this.all([this.literal_scalar_line_content, n], this.rep(0, null, [this.literal_scalar_next_line, n]), [this.block_scalar_chomp_last, t])), [this.block_scalar_chomp_empty, n, t]);
      }

      // [033]
      // literal-scalar-line-content(n) ::=
      //   empty-line(n,BLOCK-IN)*
      //   indentation-spaces(n)
      //   non-break-character+
      literal_scalar_line_content(n) {
        // XXX @all used to disambiguate @rgx capture:
        return this.all(this.rep(0, null, [this.empty_line, n, "block-in"]), this.indentation_spaces_n(n), this.all(this.rgx(RegExp(`${non_break_character}+`, "yu"))));
      }

      // [034]
      // literal-scalar-next-line(n) ::=
      //   break-as-line-feed
      //   literal-scalar-line-content(n)
      literal_scalar_next_line(n) {
        return this.all(this.rgx(re_break_as_line_feed), [this.literal_scalar_line_content, n]);
      }

      // [035]
      // block-folded-scalar(n) ::=
      //   '>'
      //   block-scalar-indicators(t)
      //   folded-scalar-content(n+m,t)
      block_folded_scalar(n) {
        return this.all(this.chr('>'), [this.block_scalar_indicator, n], [this.folded_scalar_content, this.add(n, this.m()), this.t()]);
      }

      // [036]
      // folded-scalar-content(n,t) ::=
      //   (
      //     folded-scalar-lines-different-indentation(n)
      //     block-scalar-chomp-last(t)
      //   )?
      //   block-scalar-chomp-empty(n,t)
      folded_scalar_content(n, t) {
        return this.all(this.rep(0, 1, this.all([this.folded_scalar_lines_different_indentation, n], [this.block_scalar_chomp_last, t])), [this.block_scalar_chomp_empty, n, t]);
      }

      // [037]
      // folded-scalar-lines-different-indentation(n) ::=
      //   folded-scalar-lines-same-indentation(n)
      //   (
      //     break-as-line-feed
      //     folded-scalar-lines-same-indentation(n)
      //   )*
      folded_scalar_lines_different_indentation(n) {
        return this.all([this.folded_scalar_lines_same_indentation, n], this.rep(0, null, this.all(this.rgx(re_break_as_line_feed), [this.folded_scalar_lines_same_indentation, n])));
      }

      // [038]
      // folded-scalar-lines-same-indentation(n) ::=
      //   empty-line(n,BLOCK-IN)*
      //   (
      //       folded-scalar-lines(n)
      //     | folded-scalar-spaced-lines(n)
      //   )
      folded_scalar_lines_same_indentation(n) {
        return this.all(this.rep(0, null, [this.empty_line, n, "block-in"]), this.any([this.folded_scalar_lines, n], [this.folded_scalar_spaced_lines, n]));
      }

      // [039]
      // folded-scalar-lines(n) ::=
      //   folded-scalar-text(n)
      //   (
      //     folded-whitespace(n,BLOCK-IN)
      //     folded-scalar-text(n)
      //   )*
      folded_scalar_lines(n) {
        return this.all([this.folded_scalar_text, n], this.rep(0, null, this.all([this.folded_whitespace, n, "block-in"], [this.folded_scalar_text, n])));
      }

      // [040]
      // folded-scalar-spaced-lines(n) ::=
      //   folded-scalar-spaced-text(n)
      //   (
      //     line-break-and-empty-lines(n)
      //     folded-scalar-spaced-text(n)
      //   )*
      folded_scalar_spaced_lines(n) {
        return this.all([this.folded_scalar_spaced_text, n], this.rep(0, null, this.all([this.line_break_and_empty_lines, n], [this.folded_scalar_spaced_text, n])));
      }

      // [041]
      // folded-scalar-text(n) ::=
      //   indentation-spaces(n)
      //   non-space-character
      //   non-break-character*
      folded_scalar_text(n) {
        // XXX @all used to disambiguate @rgx capture:
        return this.all(this.indentation_spaces_n(n), this.all(this.rgx(RegExp(`${non_space_character}+${non_break_character}*`, "yu"))));
      }

      // [042]
      // line-break-and-empty-lines(n) ::=
      //   break-as-line-feed
      //   empty-line(n,BLOCK-IN)*
      line_break_and_empty_lines(n) {
        return this.all(this.rgx(re_break_as_line_feed), this.rep(0, null, [this.empty_line, n, "block-in"]));
      }

      // [043]
      // folded-scalar-spaced-text(n) ::=
      //   indentation-spaces(n)
      //   blank-character
      //   non-break-character*
      folded_scalar_spaced_text(n) {
        return this.all(this.indentation_spaces_n(n), this.all(this.rgx(RegExp(`${blank_character}${non_break_character}*`, "yu"))));
      }

      // [044]
      // block-scalar-indicators(t) ::=
      //   (
      //       (
      //         block-scalar-indentation-indicator
      //         block-scalar-chomping-indicator(t)
      //       )
      //     | (
      //         block-scalar-chomping-indicator(t)
      //         block-scalar-indentation-indicator
      //       )
      //   )
      //   (
      //       comment-line
      //     | line-ending
      //   )
      block_scalar_indicator(n) {
        return this.all(this.any(this.all([this.block_scalar_indentation_indicator, n], this.block_scalar_chomping_indicator, this.ws_lookahead), this.all(this.block_scalar_chomping_indicator, [this.block_scalar_indentation_indicator, n], this.ws_lookahead)), this.comment_line);
      }

      // [045]
      // block-scalar-indentation-indicator ::=
      //   decimal-digit-1-9
      block_scalar_indentation_indicator(n) {
        return this.any(this.if(this.rgx(re_decimal_digit_1_9), this.set('m', this.ord(this.match))), this.if(this.empty, this.set('m', [this.auto_detect, n])));
      }

      // [046]
      // block-scalar-chomping-indicator(STRIP) ::= '-'
      // block-scalar-chomping-indicator(KEEP)  ::= '+'
      // block-scalar-chomping-indicator(CLIP)  ::= ""
      block_scalar_chomping_indicator() {
        return this.any(this.if(this.chr('-'), this.set('t', "strip")), this.if(this.chr('+'), this.set('t', "keep")), this.if(this.empty, this.set('t', "clip")));
      }

      // [047]
      // block-scalar-chomp-last(STRIP) ::= line-break | <end-of-input>
      // block-scalar-chomp-last(CLIP)  ::= break-as-line-feed | <end-of-input>
      // block-scalar-chomp-last(KEEP)  ::= break-as-line-feed | <end-of-input>
      block_scalar_chomp_last(t) {
        return this.case(t, {
          'clip': this.any(this.rgx(re_break_as_line_feed), this.end_of_stream),
          'keep': this.any(this.rgx(re_break_as_line_feed), this.end_of_stream),
          'strip': this.any(this.rgx(re_line_break), this.end_of_stream)
        });
      }

      //   [048]
      //   block-scalar-chomp-empty(n,STRIP) ::= line-strip-empty(n)
      //   block-scalar-chomp-empty(n,CLIP)  ::= line-strip-empty(n)
      //   block-scalar-chomp-empty(n,KEEP)  ::= line-keep-empty(n)
      block_scalar_chomp_empty(n, t) {
        return this.case(t, {
          'strip': [this.line_strip_empty, n],
          'clip': [this.line_strip_empty, n],
          'keep': [this.line_keep_empty, n]
        });
      }

      // [049]
      // line-strip-empty(n) ::=
      //   (
      //     indentation-spaces-less-or-equal(n)
      //     line-break
      //   )*
      //   line-trail-comments(n)?
      line_strip_empty(n) {
        return this.all(this.rep(0, null, this.all([this.indentation_spaces_less_or_equal, n], this.rgx(re_line_break))), this.rep(0, 1, [this.line_trail_comments, n]));
      }

      // [050]
      // line-keep-empty(n) ::=
      //   empty-line(n,BLOCK-IN)*
      //   line-trail-comments(n)?
      line_keep_empty(n) {
        return this.all(this.rep(0, null, [this.empty_line, n, "block-in"]), this.rep(0, 1, [this.line_trail_comments, n]));
      }

      line_trail_comments(n) {
        return this.all([this.indentation_spaces_less_than, n], this.rgx(re_line_trail_comments), this.rep(0, null, this.l_comment));
      }

      // [052]
      // flow-node(n,c) ::=
      //     alias-node
      //   | flow-content(n,c)
      //   | (
      //       node-properties(n,c)
      //       (
      //         (
      //           separation-characters(n,c)
      //           flow-content(n,c)
      //         )
      //         | empty-node
      //       )
      //     )
      flow_node(n, c) {
        return this.any(this.alias_node, [this.flow_content, n, c], this.all([this.node_properties, n, c], this.any(this.all([this.separation_characters, n, c], [this.flow_content, n, c]), this.empty_node)));
      }

      // [053]
      // flow-content(n,c) ::=
      //     flow-yaml-content(n,c)
      //   | flow-json-content(n,c)
      flow_content(n, c) {
        return this.any([this.flow_yaml_content, n, c], [this.flow_json_content, n, c]);
      }

      // [054]
      // flow-yaml-content(n,c) ::=
      //   flow-plain-scalar(n,c)
      flow_yaml_content(n, c) {
        return [this.flow_plain_scalar, n, c];
      }

      // [055]
      // flow-json-content(n,c) ::=
      //     flow-sequence(n,c)
      //   | flow-mapping(n,c)
      //   | single-quoted-scalar(n,c)
      //   | double-quoted-scalar(n,c)
      flow_json_content(n, c) {
        return this.any([this.flow_sequence, n, c], [this.flow_mapping, n, c], [this.single_quoted_scalar, n, c], [this.double_quoted_scalar, n, c]);
      }

      // [056]
      // flow-mapping(n,c) ::=
      //   '{'
      //   separation-characters(n,c)?
      //   flow-mapping-context(n,c)?
      //   '}'
      flow_mapping(n, c) {
        return this.all(this.chr('{'), this.rep(0, 1, [this.separation_characters, n, c]), this.rep(0, 1, [this.flow_mapping_context, n, c]), this.chr('}'));
      }

      // [057]
      // flow-mapping-entries(n,c) ::=
      //   flow-mapping-entry(n,c)
      //   separation-characters(n,c)?
      //   (
      //     ','
      //     separation-characters(n,c)?
      //     flow-mapping-entries(n,c)?
      //   )?
      flow_mapping_entries(n, c) {
        return this.all([this.flow_mapping_entry, n, c], this.rep(0, 1, [this.separation_characters, n, c]), this.rep(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.separation_characters, n, c]), this.rep(0, 1, [this.flow_mapping_entries, n, c]))));
      }

      // [058]
      // flow-mapping-entry(n,c) ::=
      //     (
      //       '?'                           # Not followed by non-ws char
      //       separation-characters(n,c)
      //       flow-mapping-explicit-entry(n,c)
      //     )
      //   | flow-mapping-implicit-entry(n,c)
      flow_mapping_entry(n, c) {
        return this.any(this.all(this.rgx(RegExp(`\\?${ws_lookahead}`, "y")), [this.separation_characters, n, c], [this.flow_mapping_explicit_entry, n, c]), [this.flow_mapping_implicit_entry, n, c]);
      }

      // [59]
      // flow-mapping-explicit-entry(n,c) ::=
      //     flow-mapping-implicit-entry(n,c)
      //   | (
      //       empty-node
      //       empty-node
      //     )
      flow_mapping_explicit_entry(n, c) {
        return this.any([this.flow_mapping_implicit_entry, n, c], this.all(this.empty_node, this.empty_node));
      }

      // [60]
      // flow-mapping-implicit-entry(n,c) ::=
      //     flow-mapping-yaml-key-entry(n,c)
      //   | flow-mapping-empty-key-entry(n,c)
      //   | flow-mapping-json-key-entry(n,c)
      flow_mapping_implicit_entry(n, c) {
        return this.any([this.flow_mapping_yaml_key_entry, n, c], [this.flow_mapping_empty_key_entry, n, c], [this.flow_mapping_json_key_entry, n, c]);
      }

      // [61]
      // flow-mapping-yaml-key-entry(n,c) ::=
      //   flow-yaml-node(n,c)
      //   (
      //       (
      //         separation-characters(n,c)?
      //         flow-mapping-separate-value(n,c)
      //       )
      //     | empty-node
      //   )
      flow_mapping_yaml_key_entry(n, c) {
        return this.all([this.flow_yaml_node, n, c], this.any(this.all(this.rep(0, 1, [this.separation_characters, n, c]), [this.flow_mapping_separate_value, n, c]), this.empty_node));
      }

      // [62]
      // flow-mapping-empty-key-entry(n,c) ::=
      //   empty-node
      //   flow-mapping-separate-value(n,c)
      flow_mapping_empty_key_entry(n, c) {
        return this.all(this.empty_node, [this.flow_mapping_separate_value, n, c]);
      }

      // [63]
      // flow-mapping-separate-value(n,c) ::=
      //   ':'
      //   [ lookahead ≠ non-space-plain-scalar-character(c) ]
      //   (
      //       (
      //         separation-characters(n,c)
      //         flow-node(n,c)
      //       )
      //     | empty-node
      //   )
      flow_mapping_separate_value(n, c) {
        return this.all(this.rgx(RegExp(`(?::(?!${this.non_space_plain_scalar_character(c)}))`, "yu")), this.any(this.all([this.separation_characters, n, c], [this.flow_node, n, c]), this.empty_node));
      }

      // [64]
      // flow-mapping-json-key-entry(n,c) ::=
      //   flow-json-node(n,c)
      //   (
      //       (
      //         separation-characters(n,c)?
      //         flow-mapping-adjacent-value(n,c)
      //       )
      //     | empty-node
      //   )
      flow_mapping_json_key_entry(n, c) {
        return this.all([this.flow_json_node, n, c], this.any(this.all(this.rep(0, 1, [this.separation_characters, n, c]), [this.flow_mapping_adjacent_value, n, c]), this.empty_node));
      }

      // [65]
      // flow-mapping-adjacent-value(n,c) ::=
      //   ':'
      //   (
      //       (
      //         separation-characters(n,c)?
      //         flow-node(n,c)
      //       )
      //     | empty-node
      //   )
      flow_mapping_adjacent_value(n, c) {
        return this.all(this.chr(':'), this.any(this.all(this.rep(0, 1, [this.separation_characters, n, c]), [this.flow_node, n, c]), this.empty_node));
      }

      // [66]
      // flow-pair(n,c) ::=
      //     (
      //       '?'                           # Not followed by non-ws char
      //       separation-characters(n,c)
      //       flow-mapping-explicit-entry(n,c)
      //     )
      //   | flow-pair-entry(n,c)
      flow_pair(n, c) {
        return this.any(this.all(this.rgx(RegExp(`\\?${ws_lookahead}`)), [this.separation_characters, n, c], [this.flow_mapping_explicit_entry, n, c]), [this.flow_pair_entry, n, c]);
      }

      // [67]
      // flow-pair-entry(n,c) ::=
      //     flow-pair-yaml-key-entry(n,c)
      //   | flow-mapping-empty-key-entry(n,c)
      //   | flow-pair-json-key-entry(n,c)
      flow_pair_entry(n, c) {
        return this.any([this.flow_pair_yaml_key_entry, n, c], [this.flow_mapping_empty_key_entry, n, c], [this.flow_pair_json_key_entry, n, c]);
      }

      // [68]
      // flow-pair-yaml-key-entry(n,c) ::=
      //   implicit-yaml-key(FLOW-KEY)
      //   flow-mapping-separate-value(n,c)
      flow_pair_yaml_key_entry(n, c) {
        return this.all([this.implicit_yaml_key, "flow-key"], [this.flow_mapping_separate_value, n, c]);
      }

      // [69]
      // flow-pair-json-key-entry(n,c) ::=
      //   implicit-json-key(FLOW-KEY)
      //   flow-mapping-adjacent-value(n,c)
      flow_pair_json_key_entry(n, c) {
        return this.all([this.implicit_json_key, "flow-key"], [this.flow_mapping_adjacent_value, n, c]);
      }

      // [70]
      // implicit-yaml-key(c) ::=
      //   flow-yaml-node(0,c)
      //   separation-blanks?
      //   /* At most 1024 characters altogether */
      implicit_yaml_key(c) {
        return this.all(this.max(1024), [this.flow_yaml_node, null, c], this.rep(0, 1, this.separation_blanks));
      }

      // [71]
      // implicit-json-key(c) ::=
      //   flow-json-node(0,c)
      //   separation-blanks?
      //   /* At most 1024 characters altogether */
      implicit_json_key(c) {
        return this.all(this.max(1024), [this.flow_json_node, null, c], this.rep(0, 1, this.separation_blanks));
      }

      // [72]
      // flow-yaml-node(n,c) ::=
      //     alias-node
      //   | flow-yaml-content(n,c)
      //   | (
      //       node-properties(n,c)
      //       (
      //           (
      //             separation-characters(n,c)
      //             flow-yaml-content(n,c)
      //           )
      //         | empty-node
      //       )
      //     )
      flow_yaml_node(n, c) {
        return this.any(this.alias_node, [this.flow_yaml_content, n, c], this.all([this.node_properties, n, c], this.any(this.all([this.separation_characters, n, c], [this.flow_content, n, c]), this.empty_node)));
      }

      // [73]
      // flow-json-node(n,c) ::=
      //   (
      //     node-properties(n,c)
      //     separation-characters(n,c)
      //   )?
      //   flow-json-content(n,c)
      flow_json_node(n, c) {
        return this.all(this.rep(0, 1, this.all([this.node_properties, n, c], [this.separation_characters, n, c])), [this.flow_json_content, n, c]);
      }

      // [074]
      // flow-sequence(n,c) ::=
      //   '['
      //   separation-characters(n,c)?
      //   flow-sequence-context(n,c)?
      //   ']'
      flow_sequence(n, c) {
        return this.all(this.chr('['), this.rep(0, 1, [this.separation_characters, n, c]), this.rep(0, 1, [this.flow_sequence_context, n, c]), this.chr(']'));
      }

      // [075]
      // flow-sequence-entries(n,c) ::=
      //   flow-sequence-entry(n,c)
      //   separation-characters(n,c)?
      //   (
      //     ','
      //     separation-characters(n,c)?
      //     flow-sequence-entries(n,c)?
      //   )?
      flow_sequence_entries(n, c) {
        return this.all([this.flow_sequence_entry, n, c], this.rep(0, 1, [this.separation_characters, n, c]), this.rep(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.separation_characters, n, c]), this.rep(0, 1, [this.flow_sequence_entries, n, c]))));
      }

      // [76]
      // flow-sequence-entry(n,c) ::=
      //     flow-pair(n,c)
      //   | flow-node(n,c)
      flow_sequence_entry(n, c) {
        return this.any([this.flow_pair, n, c], [this.flow_node, n, c]);
      }

      // [77]
      // double-quoted-scalar(n,c) ::=
      //   '"'
      //   double-quoted-text(n,c)
      //   '"'
      double_quoted_scalar(n, c) {
        return this.all(this.chr('"'), [this.double_quoted_text, n, c], this.chr('"'));
      }

      // [78]
      // double-quoted-text(n,BLOCK-KEY) ::= double-quoted-one-line
      // double-quoted-text(n,FLOW-KEY)  ::= double-quoted-one-line
      // double-quoted-text(n,FLOW-OUT)  ::= double-quoted-multi-line(n)
      // double-quoted-text(n,FLOW-IN)   ::= double-quoted-multi-line(n)
      double_quoted_text(n, c) {
        return this.case(c, {
          'block-key': this.double_quoted_one_line,
          'flow-in': [this.double_quoted_multi_line, n],
          'flow-key': this.double_quoted_one_line,
          'flow-out': [this.double_quoted_multi_line, n]
        });
      }

      // [79]
      // double-quoted-multi-line(n) ::=
      //   double-quoted-first-line
      //   (
      //       double-quoted-next-line(n)
      //     | blank-character*
      //   )
      double_quoted_multi_line(n) {
        return this.all(this.double_quoted_first_line, this.any([this.double_quoted_next_line, n], this.rgx(`${blank_character}*`)));
      }

      // [80]
      // double-quoted-one-line ::=
      //   non-break-double-quoted-character*
      double_quoted_one_line() {
        return this.rgx(RegExp(`${non_break_double_quoted_character}*`, "yu"));
      }

      // [81]
      // double-quoted-first-line ::=
      //   (
      //     blank-character*
      //     non-space-double-quoted-character
      //   )*
      double_quoted_first_line() {
        return this.rgx(RegExp(`(?:${blank_character}*${non_space_double_quoted_character})*`, "yu"));
      }

      // [82]
      // double-quoted-next-line(n) ::=
      //   (
      //       double-quoted-line-continuation(n)
      //     | flow-folded-whitespace(n)
      //   )
      //   (
      //     non-space-double-quoted-character
      //     double-quoted-first-line
      //     (
      //         double-quoted-next-line(n)
      //       | blank-character*
      //     )
      //   )?
      double_quoted_next_line(n) {
        return this.all(this.any([this.double_quoted_line_continuation, n], [this.flow_folded_whitespace, n]), this.rep(0, 1, this.all(this.non_space_double_quoted_character, this.double_quoted_first_line, this.any([this.double_quoted_next_line, n], this.rgx(`${blank_character}*`)))));
      }

      non_space_double_quoted_character() {
        return this.rgx(re_non_space_double_quoted_character);
      }

      // [85]
      // double-quoted-line-continuation(n) ::=
      //   blank-character*
      //   '\'
      //   line-break
      //   empty-line(n,FLOW-IN)*
      //   indentation-spaces-plus-maybe-more(n)
      double_quoted_line_continuation(n) {
        return this.all(this.rgx(RegExp(`${blank_character}*\\\\${line_break}`, "y")), this.rep(0, null, [this.empty_line, n, "flow-in"]), [this.indentation_spaces_plus_maybe_more, n]);
      }

      // [086]  # XXX fix typo in 1.3.0 spec
      // flow-mapping-context(n,FLOW-OUT)  ::= flow-sequence-entries(n,FLOW-IN)
      // flow-mapping-context(n,FLOW-IN)   ::= flow-sequence-entries(n,FLOW-IN)
      // flow-mapping-context(n,BLOCK-KEY) ::= flow-sequence-entries(n,FLOW-KEY)
      // flow-mapping-context(n,FLOW-KEY)  ::= flow-sequence-entries(n,FLOW-KEY)
      flow_mapping_context(n, c) {
        return this.case(c, {
          'flow-out': [this.flow_mapping_entries, n, "flow-in"],
          'flow-in': [this.flow_mapping_entries, n, "flow-in"],
          'block-key': [this.flow_mapping_entries, n, "flow-key"],
          'flow-key': [this.flow_mapping_entries, n, "flow-key"]
        });
      }

      // [087]
      // flow-sequence-context(n,FLOW-OUT)  ::= flow-sequence-entries(n,FLOW-IN)
      // flow-sequence-context(n,FLOW-IN)   ::= flow-sequence-entries(n,FLOW-IN)
      // flow-sequence-context(n,BLOCK-KEY) ::= flow-sequence-entries(n,FLOW-KEY)
      // flow-sequence-context(n,FLOW-KEY)  ::= flow-sequence-entries(n,FLOW-KEY)
      flow_sequence_context(n, c) {
        return this.case(c, {
          'flow-out': [this.flow_sequence_entries, n, "flow-in"],
          'flow-in': [this.flow_sequence_entries, n, "flow-in"],
          'block-key': [this.flow_sequence_entries, n, "flow-key"],
          'flow-key': [this.flow_sequence_entries, n, "flow-key"]
        });
      }

      // [88]
      // single-quoted-scalar(n,c) ::=
      //   "'"
      //   single-quoted-text(n,c)
      //   "'"
      single_quoted_scalar(n, c) {
        return this.all(this.chr("'"), [this.single_quoted_text, n, c], this.chr("'"));
      }

      // [89]
      // single-quoted-text(BLOCK-KEY) ::= single-quoted-one-line
      // single-quoted-text(FLOW-KEY)  ::= single-quoted-one-line
      // single-quoted-text(FLOW-OUT)  ::= single-quoted-multi-line(n)
      // single-quoted-text(FLOW-IN)   ::= single-quoted-multi-line(n)
      single_quoted_text(n, c) {
        return this.case(c, {
          'block-key': this.rgx(re_single_quoted_one_line),
          'flow-in': [this.single_quoted_multi_line, n],
          'flow-key': this.rgx(re_single_quoted_one_line),
          'flow-out': [this.single_quoted_multi_line, n]
        });
      }

      // [90]
      // single-quoted-multi-line(n) ::=
      //   single-quoted-first-line
      //   (
      //       single-quoted-next-line(n)
      //     | blank-character*
      //   )
      single_quoted_multi_line(n) {
        return this.all(this.rgx(re_single_quoted_first_line), this.any([this.single_quoted_next_line, n], this.rgx(`${blank_character}*`)));
      }

      single_quoted_next_line(n) {
        return this.all([this.flow_folded_whitespace, n], this.rep(0, 1, this.all(this.rgx(re_single_quoted_next_line), this.any([this.single_quoted_next_line, n], this.rgx(`${blank_character}*`)))));
      }

      // [97]
      // flow-plain-scalar(n,FLOW-OUT)  ::= plain-scalar-multi-line(n,FLOW-OUT)
      // flow-plain-scalar(n,FLOW-IN)   ::= plain-scalar-multi-line(n,FLOW-IN)
      // flow-plain-scalar(n,BLOCK-KEY) ::= plain-scalar-single-line(BLOCK-KEY)
      // flow-plain-scalar(n,FLOW-KEY)  ::= plain-scalar-single-line(FLOW-KEY)
      flow_plain_scalar(n, c) {
        return this.case(c, {
          'block-key': [this.plain_scalar_single_line, c],
          'flow-in': [this.plain_scalar_multi_line, n, c],
          'flow-key': [this.plain_scalar_single_line, c],
          'flow-out': [this.plain_scalar_multi_line, n, c]
        });
      }

      // [98]
      // plain-scalar-multi-line(n,c) ::=
      //   plain-scalar-single-line(c)
      //   plain-scalar-next-line(n,c)*
      plain_scalar_multi_line(n, c) {
        return this.all([this.plain_scalar_single_line, c], this.rep(0, null, [this.plain_scalar_next_line, n, c]));
      }

      // [99]
      // plain-scalar-single-line(c) ::=
      //   plain-scalar-first-character(c)
      //   plain-scalar-line-characters(c)
      plain_scalar_single_line(c) {
        return this.all([this.plain_scalar_first_character, c], [this.plain_scalar_line_characters, c]);
      }

      // [100]
      // plain-scalar-next-line(n,c) ::=
      //   flow-folded-whitespace(n)
      //   plain-scalar-characters(c)
      //   plain-scalar-line-characters(c)
      plain_scalar_next_line(n, c) {
        return this.all([this.flow_folded_whitespace, n], [this.plain_scalar_characters, c], [this.plain_scalar_line_characters, c]);
      }

      // [101]
      // plain-scalar-line-characters(c) ::=
      //   (
      //     blank-character*
      //     plain-scalar-characters(c)
      //   )*
      plain_scalar_line_characters(c) {
        return this.rgx(RegExp(`(?:${blank_character}*${this.plain_scalar_characters_re(c)})*`, "yu"));
      }

      // [102]
      // plain-scalar-first-character(c) ::=
      //     (
      //         non-space-character
      //       - '?'                         # Mapping key
      //       - ':'                         # Mapping value
      //       - '-'                         # Sequence entry
      //       - '{'                         # Mapping start
      //       - '}'                         # Mapping end
      //       - '['                         # Sequence start
      //       - ']'                         # Sequence end
      //       - ','                         # Entry separator
      //       - '#'                         # Comment
      //       - '&'                         # Anchor
      //       - '*'                         # Alias
      //       - '!'                         # Tag
      //       - '|'                         # Literal scalar
      //       - '>'                         # Folded scalar
      //       - "'"                         # Single quote
      //       - '"'                         # Double quote
      //       - '%'                         # Directive
      //       - '@'                         # Reserved
      //       - '`'                         # Reserved
      //     )
      //   | (
      //       ( '?' | ':' | '-' )
      //       [ lookahead = non-space-plain-scalar-character(c) ]
      //     )
      plain_scalar_first_character(c) {
        return this.any(this.rgx(RegExp(`(?:(?![-?:,[\\]{}\\x23&*!|>'"%@\`])${non_space_character // '#'
}|(?:[?:-](?=${this.non_space_plain_scalar_character(c)})))`, "yu")));
      }

      // [103]
      // plain-scalar-characters(c) ::=
      //     (
      //         non-space-plain-scalar-character(c)
      //       - ':'
      //       - '#'
      //     )
      //   | (
      //       [ lookbehind = non-space-character ]
      //       '#'
      //     )
      //   | (
      //       ':'
      //       [ lookahead = non-space-plain-scalar-character(c) ]
      //     )
      plain_scalar_characters_re(c) {
        var non_space_plain_scalar_character, plain_scalar_characters;
        non_space_plain_scalar_character = this.non_space_plain_scalar_character(c);
        [plain_scalar_characters] = r(RegExp(`(?:(?:(?![:\\x23])${non_space_plain_scalar_character})|(?:(?<=${non_space_character})\\x23)|(?::(?=${non_space_plain_scalar_character})))`, "u"));
        return plain_scalar_characters;
      }

      plain_scalar_characters(c) {
        return this.rgx(RegExp(`${this.plain_scalar_characters_re(c)}`, "yu"));
      }

      // [104]
      // non-space-plain-scalar-character(FLOW-OUT)  ::= block-plain-scalar-character
      // non-space-plain-scalar-character(FLOW-IN)   ::= flow-plain-scalar-character
      // non-space-plain-scalar-character(BLOCK-KEY) ::= block-plain-scalar-character
      // non-space-plain-scalar-character(FLOW-KEY)  ::= flow-plain-scalar-character
      non_space_plain_scalar_character(c) {
        switch (c) {
          case 'block-key':
            return this.block_plain_scalar_character();
          case 'flow-in':
            return this.flow_plain_scalar_character();
          case 'flow-key':
            return this.flow_plain_scalar_character();
          case 'flow-out':
            return this.block_plain_scalar_character();
        }
      }

      // [105]
      // block-plain-scalar-character ::=
      //   non-space-character
      block_plain_scalar_character() {
        var re;
        [re] = r(RegExp(`(?:${non_space_character})`, "u"));
        return re;
      }

      // [106]
      // flow-plain-scalar-character ::=
      //     non-space-characters
      //   - flow-collection-indicators
      flow_plain_scalar_character() {
        var re;
        [re] = r(RegExp(`(?:(?!${flow_collection_indicator})${non_space_character})`, "u"));
        return re;
      }

      // [107]
      // alias-node ::=
      //   '*'
      //   anchor-name
      alias_node() {
        return this.rgx(RegExp(`\\*${anchor_name}`, "yu"));
      }

      // [108]
      // empty-node ::=
      //   ""
      empty_node() {
        return this.empty;
      }

      // [109]
      // indentation-spaces(0) ::=
      //   ""
      indentation_spaces() {
        return this.rgx(RegExp(`${space_character}*`, "y"));
      }

      // indentation-spaces(n+1) ::=
      //   space-character
      //   indentation-spaces(n)

        // When n≥0
      indentation_spaces_n(n) {
        return this.rgx(RegExp(`${space_character}{${n}}`, "y"));
      }

      // [110]
      // indentation-spaces-less-than(1) ::=
      //   ""

        // # When n≥1
      indentation_spaces_less_than(n) {
        return this.all(this.indentation_spaces(), this.lt(this.len(this.match), n));
      }

      // [111]
      // indentation-spaces-less-or-equal(0) ::=
      //   ""

        // # When n≥0
      indentation_spaces_less_or_equal(n) {
        return this.all(this.indentation_spaces(), this.le(this.len(this.match), n));
      }

      // [112]
      // line-prefix-spaces(n,BLOCK-OUT) ::= indentation-spaces-exact(n)
      // line-prefix-spaces(n,BLOCK-IN)  ::= indentation-spaces-exact(n)
      // line-prefix-spaces(n,FLOW-OUT)  ::= indentation-spaces-plus-maybe-more(n)
      // line-prefix-spaces(n,FLOW-IN)   ::= indentation-spaces-plus-maybe-more(n)
      line_prefix_spaces(n, c) {
        return this.case(c, {
          'block-in': [this.indentation_spaces_exact, n],
          'block-out': [this.indentation_spaces_exact, n],
          'flow-in': [this.indentation_spaces_plus_maybe_more, n],
          'flow-out': [this.indentation_spaces_plus_maybe_more, n]
        });
      }

      // [113]
      // indentation-spaces-exact(n) ::=
      //   indentation-spaces(n)
      indentation_spaces_exact(n) {
        return this.indentation_spaces_n(n);
      }

      // [114]
      // indentation-spaces-plus-maybe-more(n) ::=
      //   indentation-spaces(n)
      //   separation-blanks?
      indentation_spaces_plus_maybe_more(n) {
        return this.all(this.indentation_spaces_n(n), this.rep(0, 1, this.separation_blanks));
      }

      // [115]
      // flow-folded-whitespace(n) ::=
      //   separation-blanks?
      //   folded-whitespace(n,FLOW-IN)
      //   indentation-spaces-plus-maybe-more(n)
      flow_folded_whitespace(n) {
        return this.all(this.rep(0, 1, this.separation_blanks), [this.folded_whitespace, n, "flow-in"], [this.indentation_spaces_plus_maybe_more, n]);
      }

      // [116]
      // folded-whitespace(n,c) ::=
      //     (
      //       line-break
      //       empty-line(n,c)+
      //     )
      //   | break-as-space
      // A.4.4. Comments
      folded_whitespace(n, c) {
        return this.any(this.all(this.rgx(re_line_break), this.rep(1, null, [this.empty_line, n, c])), this.rgx(re_break_as_space));
      }

      //------------------------------------------------------------------------------
      // TODO Comments need attention.
      // The translation from 1.2.2 to 1.3.0 may be wrong.
      // https://yaml.org/spec/1.2.2/#rule-s-b-comment 77, 78, 79
      // https://spec.yaml.io/main/spec/1.3.0/#rule-comment-lines 117, 118

        // [117]
      // comment-lines ::=
      //     comment-line+
      //   | <start-of-line>
      comment_lines() {
        return this.all(this.any(this.comment_line, this.start_of_line), this.rep(0, null, this.l_comment));
      }

      // XXX from [77] s-b-comment
      // [118]
      // comment-line ::=
      //   separation-blanks
      //   comment-content?
      //   line-ending
      comment_line() {
        return this.all(this.rep(0, 1, this.all(this.separation_blanks, this.rgx(RegExp(`${comment_content}?`, "yu"), true))), this.rgx(re_line_ending, true));
      }

      l_comment() {
        return this.rgx(re_l_comment);
      }

      //------------------------------------------------------------------------------

        // [120]
      // empty-line(n,c) ::=
      //   (
      //       line-prefix-spaces(n,c)
      //     | indentation-spaces-less-than(n)
      //   )
      //   break-as-line-feed
      empty_line(n, c) {
        return this.all(this.any([this.line_prefix_spaces, n, c], [this.indentation_spaces_less_than, n]), this.rgx(re_break_as_line_feed));
      }

      // [121]
      // separation-characters(n,BLOCK-OUT) ::= separation-lines(n)
      // separation-characters(n,BLOCK-IN)  ::= separation-lines(n)
      // separation-characters(n,FLOW-OUT)  ::= separation-lines(n)
      // separation-characters(n,FLOW-IN)   ::= separation-lines(n)
      // separation-characters(n,BLOCK-KEY) ::= separation-blanks
      // separation-characters(n,FLOW-KEY)  ::= separation-blanks
      separation_characters(n, c) {
        return this.case(c, {
          'block-in': [this.separation_lines, n],
          'block-key': this.separation_blanks(),
          'block-out': [this.separation_lines, n],
          'flow-in': [this.separation_lines, n],
          'flow-key': this.separation_blanks(),
          'flow-out': [this.separation_lines, n]
        });
      }

      // [122]
      // separation-lines(n) ::=
      //     (
      //       comment-lines
      //       indentation-spaces-plus-maybe-more(n)
      //     )
      //   | separation-blanks
      separation_lines(n) {
        return this.any(this.all(this.comment_lines, [this.indentation_spaces_plus_maybe_more, n]), this.separation_blanks);
      }

      separation_blanks() {
        return this.rgx(re_separation_blanks);
      }

      // [124]
      // yaml-directive-line ::=
      //   "YAML"
      //   separation-blanks
      //   yaml-version-number
      yaml_directive_line() {
        return this.all(this.rgx(RegExp(`(?:YAML${separation_blanks})`, "y")), this.yaml_version_number);
      }

      // [125]
      // yaml-version-number ::=
      //   decimal-digit+
      //   '.'
      //   decimal-digit+
      yaml_version_number() {
        return this.rgx(RegExp(`${decimal_digit}+\\.${decimal_digit}+`, "y"));
      }

      // [126]
      // reserved-directive-line ::=
      //   directive-name
      //   (
      //     separation-blanks
      //     directive-parameter
      //   )*
      reserved_directive_line() {
        return this.rgx(RegExp(`${directive_name}(?:${separation_blanks}${directive_parameter})*`, "yu"));
      }

      // [129]
      // tag-directive-line ::=
      //   "TAG"
      //   separation-blanks
      //   tag-handle
      //   separation-blanks
      //   tag-prefix
      tag_directive_line() {
        return this.all(this.rgx(RegExp(`TAG${separation_blanks}`, "y")), this.tag_handle, this.separation_blanks, this.tag_prefix);
      }

      tag_handle() {
        return this.rgx(re_tag_handle);
      }

      // [134]
      // tag-prefix ::=
      //     local-tag-prefix
      //   | global-tag-prefix
      tag_prefix() {
        return this.rgx(RegExp(`(?:${local_tag_prefix}|${global_tag_prefix})`, "y"));
      }

      // [137]
      // node-properties(n,c) ::=
      //     (
      //       anchor-property
      //       (
      //         separation-characters(n,c)
      //         tag-property
      //       )?
      //     )
      //   | (
      //       tag-property
      //       (
      //         separation-characters(n,c)
      //         anchor-property
      //       )?
      //     )
      node_properties(n, c) {
        return this.any(this.all(this.tag_property, this.rep(0, 1, this.all([this.separation_characters, n, c], this.anchor_property))), this.all(this.anchor_property, this.rep(0, 1, this.all([this.separation_characters, n, c], this.tag_property))));
      }

      // [138]
      // anchor-property ::=
      //   '&'
      //   anchor-name
      anchor_property() {
        return this.rgx(RegExp(`&${anchor_name}`, "yu"));
      }

      // [141]
      // tag-property ::=
      //     verbatim-tag
      //   | shorthand-tag
      //   | non-specific-tag
      tag_property() {
        return this.rgx(RegExp(`(?:${verbatim_tag}|${shorthand_tag}|${non_specific_tag})`, "y"));
      }

      ws_lookahead() {
        return this.rgx(re_ws_lookahead);
      }

    };

    // Helper functions:

    // Generate required regular expression and string variants:
    r = function(rgx) {
      var chars, regexp, str;
      str = String(rgx);
      if (str.match(/undefined/)) {
        die((new Error(`Bad regex '${rgx}'`)).stack);
      }
      if (str.endsWith('u')) {
        str = str.slice(0, -1);
      }
      str = String(str).slice(1, -1);
      chars = str.slice(1, -1);
      regexp = RegExp(`${str}`, "yum");
      return [str, regexp, chars];
    };

    start_of_line = '^';

    end_of_file = '(?!.|\\n)';

    // [004]
    // document-start-indicator ::=
    //   "---"
    [document_start_indicator, re_document_start_indicator] = [];

    i004 = function() {
      return [document_start_indicator, re_document_start_indicator] = r(RegExp(`---${ws_lookahead}`));
    };

    // [005]
    // document-end-indicator ::=
    //   "..."                             # Not followed by non-ws char
    [document_end_indicator, re_document_end_indicator] = r(/\.\.\./);

    // [051]
    // line-trail-comments(n) ::=
    //   indentation-spaces-less-than(n)
    //   comment-content
    //   line-ending
    //   comment-line*
    re_line_trail_comments = '';

    i051 = function() {
      return [, re_line_trail_comments] = r(RegExp(`${comment_content}${line_ending}`, "u"));
    };

    // [83]
    // non-space-double-quoted-character ::=
    //     non-break-double-quoted-character
    //   - blank-character
    [non_space_double_quoted_character, re_non_space_double_quoted_character] = [];

    i083 = function() {
      return [non_space_double_quoted_character, re_non_space_double_quoted_character] = r(RegExp(`(?!${blank_character})${non_break_double_quoted_character}`));
    };

    // [84]
    // non-break-double-quoted-character ::=
    //     double-quoted-scalar-escape-character
    //   | (
    //         json-character
    //       - '\'
    //       - '"'
    //     )
    non_break_double_quoted_character = '';

    i084 = function() {
      return [non_break_double_quoted_character] = r(RegExp(`(?:${double_quoted_scalar_escape_character}|(?![\\\\"])${json_character})`));
    };

    // [91]
    // single-quoted-one-line ::=
    //   non-break-single-quoted-character*
    re_single_quoted_one_line = '';

    i091 = function() {
      return [, re_single_quoted_one_line] = r(RegExp(`${non_break_single_quoted_character}*`));
    };

    // [92]
    // single-quoted-first-line ::=
    //   (
    //     blank-character*
    //     non-space-single-quoted-character
    //   )*
    [single_quoted_first_line, re_single_quoted_first_line] = [];

    i092 = function() {
      return [single_quoted_first_line, re_single_quoted_first_line] = r(RegExp(`(?:${blank_character}*${non_space_single_quoted_character})*`));
    };

    // [93]
    // single-quoted-next-line(n) ::=
    //   flow-folded-whitespace(n)
    //   (
    //     non-space-single-quoted-character
    //     single-quoted-first-line
    //     (
    //         single-quoted-next-line(n)
    //       | blank-character*
    //     )
    //   )?
    re_single_quoted_next_line = '';

    i093 = function() {
      return [, re_single_quoted_next_line] = r(RegExp(`${non_space_single_quoted_character}${single_quoted_first_line}`));
    };

    // [94]
    // non-space-single-quoted-character ::=
    //     non-break-single-quoted-character
    //   - blank-character
    non_space_single_quoted_character = '';

    i094 = function() {
      return [non_space_single_quoted_character] = r(RegExp(`(?:(?!${blank_character})${non_break_single_quoted_character})`));
    };

    // [95]
    // non-break-single-quoted-character ::=
    //     single-quoted-escaped-single-quote
    //   | (
    //         json-character
    //       - "'"
    //     )
    non_break_single_quoted_character = '';

    i095 = function() {
      return [non_break_single_quoted_character] = r(RegExp(`(?:${single_quoted_escaped_single_quote}|(?:(?!')${json_character}))`));
    };

    // [96]
    // single-quoted-escaped-single-quote ::=
    //   "''"
    single_quoted_escaped_single_quote = '';

    i096 = function() {
      return [single_quoted_escaped_single_quote] = r(/''/);
    };

    // XXX from [78] l-comment
    // [i118b]
    // l-comment ::=
    //   s-separate-in-line
    //   c-nb-comment-text?
    //   b-comment
    [l_comment, re_l_comment] = [];

    i118b = function() {
      return [l_comment, re_l_comment] = r(RegExp(`${separation_blanks}${comment_content}*${line_ending}`, "u"));
    };

    // [119]
    // comment-content ::=
    //   '#'
    //   non-break-character*
    comment_content = '';

    i119 = function() {
      return [comment_content] = r(RegExp(`(?:\\x23${non_break_character}*)`, "u"));
    };

    // [123]
    // separation-blanks ::=
    //     blank-character+
    //   | <start-of-line>
    [separation_blanks, re_separation_blanks] = [];

    i123 = function() {
      return [separation_blanks, re_separation_blanks] = r(RegExp(`(?:${blank_character}+|${start_of_line})`));
    };

    // [127]
    // directive-name ::=
    //   non-space-character+
    directive_name = '';

    i127 = function() {
      return [directive_name] = r(RegExp(`${non_space_character}+`, "u"));
    };

    // [128]
    // directive-parameter ::=
    //   non-space-character+
    directive_parameter = '';

    i128 = function() {
      return [directive_parameter] = r(RegExp(`${non_space_character}+`, "u"));
    };

    // [130]
    // tag-handle ::=
    //     named-tag-handle
    //   | secondary-tag-handle
    //   | primary-tag-handle
    [tag_handle, re_tag_handle] = [];

    i130 = function() {
      return [tag_handle, re_tag_handle] = r(RegExp(`(?:${named_tag_handle}|${secondary_tag_handle}|${primary_tag_handle})`));
    };

    // [131]
    // named-tag-handle ::=
    //   '!'
    //   word-character+
    //   '!'
    named_tag_handle = '';

    i131 = function() {
      return [named_tag_handle] = r(RegExp(`!${word_character}+!`));
    };

    // [132]
    // secondary-tag-handle ::=
    //   "!!"
    secondary_tag_handle = '';

    i132 = function() {
      return secondary_tag_handle = "!!";
    };

    // [133]
    // primary-tag-handle ::=
    //   '!'
    primary_tag_handle = '';

    i133 = function() {
      return primary_tag_handle = "!";
    };

    // [135]
    // local-tag-prefix ::=
    //   '!'
    //   uri-character*
    local_tag_prefix = '';

    i135 = function() {
      return [local_tag_prefix] = r(RegExp(`!${uri_character}*`));
    };

    // [136]
    // global-tag-prefix ::=
    //   tag-character
    //   uri-character*
    global_tag_prefix = '';

    i136 = function() {
      return [global_tag_prefix] = r(RegExp(`${tag_char}${uri_character}*`));
    };

    // [139]
    // anchor-name ::=
    //   anchor-character+
    anchor_name = '';

    i139 = function() {
      return [anchor_name] = r(RegExp(`(?:${anchor_character})+`, "u"));
    };

    // [140]
    // anchor-character ::=
    //     non-space-character
    //   - flow-collection-indicators
    anchor_character = '';

    i140 = function() {
      return [anchor_character] = r(RegExp(`(?:(?!${flow_collection_indicator})${non_space_character})+`, "u"));
    };

    // [142]
    // verbatim-tag ::=
    //   "!<"
    //   uri-character+
    //   '>'
    verbatim_tag = '';

    i142 = function() {
      return [verbatim_tag] = r(RegExp(`(?:!<${uri_character}+>)`));
    };

    // [143]
    // shorthand-tag ::=
    //   tag-handle
    //   tag-character+
    shorthand_tag = '';

    i143 = function() {
      return [shorthand_tag] = r(RegExp(`(${tag_handle}${tag_char}+)`));
    };

    // [144]
    // non-specific-tag ::=
    //   '!'
    non_specific_tag = "!";

    // [145]
    // byte-order-mark ::=
    //   xFEFF
    byte_order_mark = '';

    i145 = function() {
      return byte_order_mark = "\u{FEFF}";
    };

    // [146]
    // yaml-character ::=
    //                                     # 8 bit
    //     x09                             # Tab
    //   | x0A                             # Line feed
    //   | x0D                             # Carriage return
    //   | [x20-x7E]                       # Printable ASCII
    //                                     # 16 bit
    //   | x85                             # Next line (NEL)
    //   | [xA0-xD7FF]                     # Basic multilingual plane (BMP)
    //   | [xE000-xFFFD]                   # Additional unicode areas
    //   | [x010000-x10FFFF]               # 32 bit
    yaml_character = '';

    i146 = function() {
      return [yaml_character] = r(/[\x09\x0A\x0D\x20-\x7E\x85\xA0-\uD7FF\uE000-\uFFFD\u{10000}-\u{10FFFF}]/u);
    };

    // [147]
    // json-character ::=
    //     x09                             # Tab
    //   | [x20-x10FFFF]                   # Non-C0-control characters
    json_character = '';

    i147 = function() {
      return [json_character] = r(/[\x09\x20-\u{10FFFF}]/u);
    };

    // [148]
    // non-space-character ::=
    //     non-break-character
    //   - blank-character
    [non_space_character, re_non_space_character] = [];

    i148 = function() {
      return [non_space_character, re_non_space_character] = r(RegExp(`(?:(?!${blank_character})${non_break_character})`, "u"));
    };

    // [149]
    // non-break-character ::=
    //     yaml-character
    //   - x0A
    //   - x0D
    //   - byte-order-mark
    [non_break_character, re_non_break_character] = [];

    i149 = function() {
      return [non_break_character, re_non_break_character] = r(RegExp(`(?:(?![\\x0A\\x0D${byte_order_mark}])${yaml_character})`, "u"));
    };

    // [150]
    // blank-character ::=
    //     x20                             # Space
    //   | x09                             # Tab
    [blank_character, ws_lookahead, re_ws_lookahead] = [];

    i150 = function() {
      [blank_character] = r(RegExp(`[${space_character}\\t]`));
      return [ws_lookahead, re_ws_lookahead] = r(RegExp(`(?=${end_of_file}|${blank_character}|${line_break})`));
    };

    // [151]
    // space-character ::=
    //   x20
    space_character = '';

    i151 = function() {
      return space_character = "\x20";
    };

    // [152]
    // line-ending ::=
    //     line-break
    //   | <end-of-input>
    [line_ending, re_line_ending] = [];

    i152 = function() {
      return [line_ending, re_line_ending] = r(RegExp(`(?:${line_break}|${end_of_file})`));
    };

    // [153]
    // break-as-space ::=
    //   line-break
    re_break_as_space = '';

    i153 = function() {
      return re_break_as_space = re_line_break;
    };

    // [154]
    // break-as-line-feed ::=
    //   line-break
    re_break_as_line_feed = '';

    i154 = function() {
      return re_break_as_line_feed = re_line_break;
    };

    // [155]
    // line-break ::=
    //     (
    //       x0D                           # Carriage return
    //       x0A                           # Line feed
    //     )
    //   | x0D
    //   | x0A
    [line_break, re_line_break] = [];

    i155 = function() {
      return [line_break, re_line_break] = r(/(?:(?:\x0D\x0A)|\x0D|\x0A)/);
    };

    // XXX Rename to flow-collection-indicator
    // [156]
    // flow-collection-indicators ::=
    //     '{'                             # Flow mapping start
    //   | '}'                             # Flow mapping end
    //   | '['                             # Flow sequence start
    //   | ']'                             # Flow sequence end

      // [156] 023
    // c-flow-indicator ::=
    //   ',' | '[' | ']' | '{' | '}'
    [flow_collection_indicator, flow_collection_indicator_s] = [];

    i156 = function() {
      return [flow_collection_indicator, , flow_collection_indicator_s] = r(/[,[\]{}]/);
    };

    // [157]
    // double-quoted-scalar-escape-character ::=
    //   '\'
    //   (
    //       '0'
    //     | 'a'
    //     | 'b'
    //     | 't' | x09
    //     | 'n'
    //     | 'v'
    //     | 'f'
    //     | 'r'
    //     | 'e'
    //     | x20
    //     | '"'
    //     | '/'
    //     | '\'
    //     | 'N'
    //     | '_'
    //     | 'L'
    //     | 'P'
    //     | ( 'x' hexadecimal-digit{2} )
    //     | ( 'u' hexadecimal-digit{4} )
    //     | ( 'U' hexadecimal-digit{8} )
    //   )
    double_quoted_scalar_escape_character = '';

    i157 = function() {
      return [double_quoted_scalar_escape_character] = r(RegExp(`\\\\(?:[0abt\\tnvfre\\x20"/\\\\N_LP]|x${hexadecimal_digit}{2}|u${hexadecimal_digit}{4}|U${hexadecimal_digit}{8})`));
    };

    // [158]
    // tag-character ::=
    //     uri-character
    //   - '!'
    //   - flow-collection-indicators
    tag_char = '';

    i158 = function() {
      return [tag_char] = r(RegExp(`(?:(?![!${flow_collection_indicator_s}])${uri_character})`));
    };

    // [159]
    // uri-character ::=
    //     (
    //       '%'
    //       hexadecimal-digit{2}
    //     )
    //   | word-character
    //   | '#'
    //   | ';'
    //   | '/'
    //   | '?'
    //   | ':'
    //   | '@'
    //   | '&'
    //   | '='
    //   | '+'
    //   | '$'
    //   | ','
    //   | '_'
    //   | '.'
    //   | '!'
    //   | '~'
    //   | '*'
    //   | "'"
    //   | '('
    //   | ')'
    //   | '['
    //   | ']'
    uri_character = '';

    i159 = function() {
      return [uri_character] = r(RegExp(`(?:%${hexadecimal_digit}{2}|[${word_character_s}\\x23;/?:@&=+$,_.!~*'()[\\]])`));
    };

    // [160]
    // word-character ::=
    //     decimal-digit
    //   | ascii-alpha-character
    //   | '-'
    [word_character, , word_character_s] = [];

    i160 = function() {
      return [word_character, , word_character_s] = r(RegExp(`[${decimal_digit_s}${ascii_alpha_character_s}\\-]`));
    };

    // [161]
    // hexadecimal-digit ::=
    //     decimal-digit
    //   | [x41-x46]                       # A-F
    //   | [x61-x66]                       # a-f
    hexadecimal_digit = '';

    i161 = function() {
      return [hexadecimal_digit] = r(RegExp(`[${decimal_digit_s}A-Fa-f]`));
    };

    // [162]
    // decimal-digit ::=
    //   [x30-x39]                         # 0-9
    [decimal_digit, decimal_digit_s] = [];

    i162 = function() {
      return [decimal_digit, , decimal_digit_s] = r(/[0-9]/);
    };

    // [163]
    // decimal-digit-1-9 ::=
    //   [x31-x39]                         # 0-9
    re_decimal_digit_1_9 = '';

    i163 = function() {
      return [re_decimal_digit_1_9] = r(/[0-9]/);
    };

    // [164]
    // ascii-alpha-character ::=
    //     [x41-x5A]                       # A-Z
    //   | [x61-x7A]                       # a-z
    ascii_alpha_character_s = '';

    i164 = function() {
      return [, , ascii_alpha_character_s] = r(/[A-Za-z]/);
    };

    ref = [i146, i147, i145, i156, i155, i154, i162, i163, i151, i150, i149, i148, i161, i164, i160, i159, i158, i157, i153, i152, i123, i133, i132, i131, i130, i135, i136, i142, i143, i140, i139, i128, i127, i119, i118b, i051, i096, i095, i094, i091, i092, i093, i084, i083, i004];
    for (i = 0, len = ref.length; i < len; i++) {
      init = ref[i];
      //------------------------------------------------------------------------------

      // Call the variable initialization functions in the order needed for
      // JavaScript to be correct.
      init();
    }

    return Grammar;

  }).call(this);

  //     i002

}).call(this);
