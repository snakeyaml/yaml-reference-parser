// Generated by CoffeeScript 2.5.1
(function() {
  var Grammar;

  global.Grammar = Grammar = (function() {
    var b_break, b_char, b_char_s, b_comment, b_non_content, c_byte_order_mark, c_flow_indicator, c_flow_indicator_s, c_indicator, c_named_tag_handle, c_nb_comment_text, c_non_specific_tag, c_ns_esc_char, c_ns_local_tag_prefix, c_ns_shorthand_tag, c_primary_tag_handle, c_printable, c_quoted_quote, c_secondary_tag_handle, c_tag_handle, c_verbatim_tag, document_end_indicator, document_start_indicator, end_of_file, func, i, init, len, nb_char, nb_double_char, nb_json, nb_ns_single_in_line, nb_single_char, ns_anchor_char, ns_anchor_name, ns_ascii_letter_s, ns_char, ns_dec_digit, ns_dec_digit_s, ns_directive_name, ns_directive_parameter, ns_double_char, ns_global_tag_prefix, ns_hex_digit, ns_single_char, ns_tag_char, ns_uri_char, ns_word_char, ns_word_char_s, r, re_b_as_line_feed, re_b_as_space, re_b_break, re_b_char, re_b_comment, re_b_non_content, re_c_tag_handle, re_document_end_indicator, re_document_start_indicator, re_l_trail_comments, re_nb_char, re_nb_double_one_line, re_nb_ns_double_in_line, re_nb_ns_single_in_line, re_nb_single_one_line, re_ns_char, re_ns_double_char, re_ns_plain_safe_in, re_ns_plain_safe_out, re_ns_reserved_directive, re_s_indent, re_s_separate_in_line, re_s_single_next_line, s_indent_n, s_separate_in_line, s_space, s_white, start_of_line, ws_lookahead;

    class Grammar {
      // Grammar rules:
      TOP() {
        return this.yaml_stream;
      }

      // [001]
      // yaml-stream ::=
      //   document-prefix*
      //   any-document?
      //   (
      //       (
      //         document-suffix+
      //         document-prefix*
      //         any-document?
      //       )
      //     | byte-order-mark
      //     | comment-line
      //     | start-indicator-and-document
      //   )*
      yaml_stream() {
        return this.all(this.document_prefix, this.rep(0, 1, this.any_document), this.rep2(0, null, this.any(this.all(this.document_suffix, this.rep(0, null, this.document_prefix), this.rep2(0, 1, this.any_document)), this.all(this.document_prefix, this.rep(0, 1, this.start_indicator_and_document)))));
      }

      // [002]
      // document-prefix ::=
      //   byte-order-mark?
      //   comment-line*
      document_prefix() {
        return this.all(this.rep(0, 1, this.chr(c_byte_order_mark)), this.rep2(0, null, this.l_comment));
      }

      // [003]
      // document-suffix ::=
      //   document-end-indicator
      //   comment-lines
      document_suffix() {
        return this.all(this.document_end_indicator, this.s_l_comments);
      }

      document_start_indicator() {
        return this.rgx(re_document_start_indicator);
      }

      document_end_indicator() {
        return this.rgx(re_document_end_indicator);
      }

      // [006]
      // any-document ::=
      //     directives-and-document
      //   | start-indicator-and-document
      //   | bare-document
      any_document() {
        return this.any(this.directives_and_document, this.start_indicator_and_document, this.bare_document);
      }

      // [007]
      // directives-and-document ::=
      //   directive-line+
      //   start-indicator-and-document
      directives_and_document() {
        return this.all(this.rep(1, null, this.directive_line), this.start_indicator_and_document);
      }

      // [008]
      // start-indicator-and-document ::=
      //   document-start-indicator
      //   (
      //       bare-document
      //     | (
      //         empty-node
      //         comment-lines
      //       )
      //   )
      start_indicator_and_document() {
        return this.all(this.document_start_indicator, this.any(this.bare_document, this.all(this.e_node, this.s_l_comments)));
      }

      // [009]
      // bare-document ::=
      //   block-node(-1,BLOCK-IN)
      //   /* Excluding forbidden-content */
      bare_document() {
        return this.all(this.exclude(this.forbidden_content), [this.block_node, -1, "block-in"]);
      }

      // [010]
      // directive-line ::=
      //   '%'
      //   (
      //       yaml-directive-line
      //     | tag-directive-line
      //     | reserved-directive-line
      //   )
      //   comment-lines
      directive_line() {
        return this.all(this.chr('%'), this.any(this.ns_yaml_directive, this.ns_tag_directive, this.rgx(re_ns_reserved_directive)), this.s_l_comments);
      }

      // [011]
      // forbidden-content ::=
      //   <start-of-line>
      //   (
      //       document-start-indicator
      //     | document-end-indicator
      //   )
      //   (
      //       line-ending
      //     | blank-character
      //   )
      forbidden_content() {
        return this.rgx(RegExp(`(?:${start_of_line}(?:${document_start_indicator}|${document_end_indicator})(?:${b_char}|${s_white}|${end_of_file}))`, "y"));
      }

      // [012]
      // block-node(n,c) ::=
      //     block-node-in-a-block-node(n,c)
      //   | flow-node-in-a-block-node(n)
      block_node(n, c) {
        return this.any([this.block_node_in_a_block_node, n, c], [this.flow_node_in_a_block_node, n]);
      }

      // [013]
      // block-node-in-a-block-node(n,c) ::=
      //     block-scalar(n,c)
      //   | block-collection(n,c)
      block_node_in_a_block_node(n, c) {
        return this.any([this.block_scalar, n, c], [this.block_collection, n, c]);
      }

      // [014]
      // flow-node-in-a-block-node(n) ::=
      //   separation-characters(n+1,FLOW-OUT)
      //   flow-node(n+1,FLOW-OUT)
      //   comment-lines
      flow_node_in_a_block_node(n) {
        return this.all([this.s_separate, n + 1, "flow-out"], [this.ns_flow_node, n + 1, "flow-out"], this.s_l_comments);
      }

      // [015]
      // block-collection(n,c) ::=
      //   (
      //     separation-characters(n+1,c)
      //     node-properties(n+1,c)
      //   )?
      //   comment-lines
      //   (
      //       block-sequence-context(n,c)
      //     | block-mapping(n)
      //   )
      block_collection(n, c) {
        // XXX replace with `node-properties`
        // [ @block_sequence_context, [ @seq_spaces, n, c ] ]
        return this.all(this.rep(0, 1, this.all([this.s_separate, n + 1, c], this.any(this.all([this.c_ns_properties, n + 1, c], this.s_l_comments), this.all(this.c_ns_tag_property, this.s_l_comments), this.all(this.c_ns_anchor_property, this.s_l_comments)))), this.s_l_comments, this.any([this.block_sequence_context, n, c], [this.block_mapping, n]));
      }

      // [016]
      // block-sequence-context(n,BLOCK-OUT) ::= block-sequence(n-1)
      // block-sequence-context(n,BLOCK-IN)  ::= block-sequence(n)
      block_sequence_context(n, c) {
        return this.case(c, {
          'block-out': [this.block_sequence, this.sub(n, 1)],
          'block-in': [this.block_sequence, n]
        });
      }

      // [017]
      // block-scalar(n,c) ::=
      //   separation-characters(n+1,c)
      //   (
      //     node-properties(n+1,c)
      //     separation-characters(n+1,c)
      //   )?
      //   (
      //       block-literal-scalar(n)
      //     | block-folded-scalar(n)
      //   )
      block_scalar(n, c) {
        return this.all([this.s_separate, n + 1, c], this.rep(0, 1, this.all([this.c_ns_properties, n + 1, c], [this.s_separate, n + 1, c])), this.any([this.c_l_literal, n], [this.c_l_folded, n]));
      }

      // [018]
      // block-mapping(n) ::=
      //   (
      //     indentation-spaces(n+1+m)
      //     block-mapping-entry(n+1+m)
      //   )+
      block_mapping(n) {
        var m;
        if (!(m = this.call([this.auto_detect_indent, n], 'number'))) {
          return false;
        }
        return this.all(this.rep(1, null, this.all(this.rgx(s_indent_n(n + m)), [this.block_mapping_entry, n + m])));
      }

      // [019]
      // block-mapping-entry(n) ::=
      //     block-mapping-explicit-entry(n)
      //   | block-mapping-implicit-entry(n)
      block_mapping_entry(n) {
        return this.any([this.block_mapping_explicit_entry, n], [this.block_mapping_implicit_entry, n]);
      }

      // [020]
      // block-mapping-explicit-entry(n) ::=
      //   block-mapping-explicit-key(n)
      //   (
      //       block-mapping-explicit-value(n)
      //     | empty-node
      //   )
      block_mapping_explicit_entry(n) {
        return this.all([this.block_mapping_explicit_key, n], this.any([this.block_mapping_explicit_value, n], this.e_node));
      }

      // [021]
      // block-mapping-explicit-key(n) ::=
      //   '?'                               # Not followed by non-ws char
      //   block-indented-node(n,BLOCK-OUT)
      block_mapping_explicit_key(n) {
        return this.all(this.rgx(RegExp(`\\?${ws_lookahead}`, "y")), [this.block_indented_node, n, "block-out"]);
      }

      // [022]
      // block-mapping-explicit-value(n) ::=
      //   indentation-spaces(n)
      //   ':'                               # Not followed by non-ws char
      //   block-indented-node(n,BLOCK-OUT)
      block_mapping_explicit_value(n) {
        return this.all(this.rgx(s_indent_n(n)), this.rgx(RegExp(`:${ws_lookahead}`, "y")), [this.block_indented_node, n, "block-out"]);
      }

      // [023]
      // block-mapping-implicit-entry(n) ::=
      //   (
      //       block-mapping-implicit-key
      //     | empty-node
      //   )
      //   block-mapping-implicit-value(n)
      block_mapping_implicit_entry(n) {
        return this.all(this.any(this.block_mapping_implicit_key, this.e_node), [this.block_mapping_implicit_value, n]);
      }

      // XXX Can fold into 023
      // [024]
      // block-mapping-implicit-key ::=
      //     implicit-json-key(BLOCK-KEY)
      //   | implicit-yaml-key(BLOCK-KEY)
      block_mapping_implicit_key() {
        return this.any([this.c_s_implicit_json_key, "block-key"], [this.ns_s_implicit_yaml_key, "block-key"]);
      }

      // [025]
      // block-mapping-implicit-value(n) ::=
      //   ':'                               # Not followed by non-ws char
      //   (
      //       block-node(n,BLOCK-OUT)
      //     | (
      //         empty-node
      //         comment-lines
      //       )
      //   )
      block_mapping_implicit_value(n) {
        return this.all(this.rgx(RegExp(`:${ws_lookahead}`, "y")), this.any([this.block_node, n, "block-out"], this.all(this.e_node, this.s_l_comments)));
      }

      // [026]
      // compact-mapping(n) ::=
      //   block-mapping-entry(n)
      //   (
      //     indentation-spaces(n)
      //     block-mapping-entry(n)
      //   )*
      compact_mapping(n) {
        return this.all([this.block_mapping_entry, n], this.rep(0, null, this.all(this.rgx(s_indent_n(n)), [this.block_mapping_entry, n])));
      }

      // [027]
      // block-sequence(n) ::=
      //   (
      //     indentation-spaces(n+1+m)
      //     block-sequence-entry(n+1+m)
      //   )+
      block_sequence(n) {
        var m;
        if (!(m = this.call([this.auto_detect_indent, n], 'number'))) {
          return false;
        }
        return this.all(this.rep(1, null, this.all(this.rgx(s_indent_n(n + m)), [this.c_l_block_seq_entry, n + m])));
      }

      // [028]
      // block-sequence-entry(n) ::=
      //   '-'
      //   [ lookahead ≠ non-space-character ]
      //   block-indented-node(n,BLOCK-IN)
      c_l_block_seq_entry(n) {
        return this.all(this.rgx(RegExp(`-${ws_lookahead}`, "y")), this.chk('!', this.rgx(re_ns_char)), [this.block_indented_node, n, "block-in"]);
      }

      // [029]
      // block-indented-node(n,c) ::=
      //     (
      //       indentation-spaces(m)
      //       (
      //           compact-sequence(n+1+m)
      //         | compact-mapping(n+1+m)
      //       )
      //     )
      //   | block-node(n,c)
      //   | (
      //       empty-node
      //       comment-lines
      //     )
      block_indented_node(n, c) {
        var m;
        m = this.call([this.auto_detect_indent, n], 'number');
        return this.any(this.all(this.rgx(s_indent_n(m)), this.any([this.compact_sequence, n + 1 + m], [this.compact_mapping, n + 1 + m])), [this.block_node, n, c], this.all(this.e_node, this.s_l_comments));
      }

      // [030]
      // compact-sequence(n) ::=
      //   block-sequence-entry(n)
      //   (
      //     indentation-spaces(n)
      //     block-sequence-entry(n)
      //   )*
      compact_sequence(n) {
        return this.all([this.c_l_block_seq_entry, n], this.rep(0, null, this.all(this.rgx(s_indent_n(n)), [this.c_l_block_seq_entry, n])));
      }

      // [064]
      // s-indent(<n) ::=
      //   s-space{m} <where_m_<_n>
      s_indent_lt(n) {
        return this.all(this.rgx(re_s_indent), this.lt(this.len(this.match), n));
      }

      // [065]
      // s-indent(<=n) ::=
      //   s-space{m} <where_m_<=_n>
      s_indent_le(n) {
        return this.all(this.rgx(re_s_indent), this.le(this.len(this.match), n));
      }

      // [067]
      // s-line-prefix(n,c) ::=
      //   ( c = block-out => s-block-line-prefix(n) )
      //   ( c = block-in => s-block-line-prefix(n) )
      //   ( c = flow-out => s-flow-line-prefix(n) )
      //   ( c = flow-in => s-flow-line-prefix(n) )
      s_line_prefix(n, c) {
        return this.case(c, {
          'block-in': [this.s_block_line_prefix, n],
          'block-out': [this.s_block_line_prefix, n],
          'flow-in': [this.s_flow_line_prefix, n],
          'flow-out': [this.s_flow_line_prefix, n]
        });
      }

      // XXX Can be removed
      // [068]
      // s-block-line-prefix(n) ::=
      //   s-indent(n)
      s_block_line_prefix(n) {
        return this.rgx(s_indent_n(n));
      }

      // [069]
      // s-flow-line-prefix(n) ::=
      //   s-indent(n)
      //   s-separate-in-line?
      s_flow_line_prefix(n) {
        return this.all(this.rgx(s_indent_n(n)), this.rep(0, 1, this.rgx(re_s_separate_in_line)));
      }

      // [070]
      // l-empty(n,c) ::=
      //   ( s-line-prefix(n,c) | s-indent(<n) )
      //   b-as-line-feed
      l_empty(n, c) {
        return this.all(this.any([this.s_line_prefix, n, c], [this.s_indent_lt, n]), this.rgx(re_b_as_line_feed));
      }

      // [073]
      // b-l-folded(n,c) ::=
      //   b-l-trimmed(n,c) | b-as-space
      b_l_folded(n, c) {
        return this.any(this.all(this.rgx(re_b_non_content), this.rep(1, null, [this.l_empty, n, c])), this.rgx(re_b_as_space));
      }

      // [074]
      // s-flow-folded(n) ::=
      //   s-separate-in-line?
      //   b-l-folded(n,flow-in)
      //   s-flow-line-prefix(n)
      s_flow_folded(n) {
        return this.all(this.rep(0, 1, this.rgx(re_s_separate_in_line)), [this.b_l_folded, n, "flow-in"], [this.s_flow_line_prefix, n]);
      }

      // [077]
      // s-b-comment ::=
      //   ( s-separate-in-line
      //   c-nb-comment-text? )?
      //   b-comment
      s_b_comment() {
        return this.all(this.rep(0, 1, this.all(this.rgx(re_s_separate_in_line), this.rgx(RegExp(`${c_nb_comment_text}?`, "yu"), true))), this.rgx(re_b_comment, true));
      }

      // [078]
      // l-comment ::=
      //   s-separate-in-line c-nb-comment-text?
      //   b-comment
      l_comment() {
        return this.all(this.rgx(re_s_separate_in_line), this.rgx(RegExp(`${c_nb_comment_text}*${b_comment}`, "yu")));
      }

      // [079]
      // s-l-comments ::=
      //   ( s-b-comment | <start_of_line> )
      //   l-comment*
      s_l_comments() {
        return this.all(this.any(this.s_b_comment, this.start_of_line), this.rep(0, null, this.l_comment));
      }

      // [080]
      // s-separate(n,c) ::=
      //   ( c = block-out => s-separate-lines(n) )
      //   ( c = block-in => s-separate-lines(n) )
      //   ( c = flow-out => s-separate-lines(n) )
      //   ( c = flow-in => s-separate-lines(n) )
      //   ( c = block-key => s-separate-in-line )
      //   ( c = flow-key => s-separate-in-line )
      s_separate(n, c) {
        return this.case(c, {
          'block-in': [this.s_separate_lines, n],
          'block-key': this.rgx(re_s_separate_in_line),
          'block-out': [this.s_separate_lines, n],
          'flow-in': [this.s_separate_lines, n],
          'flow-key': this.rgx(re_s_separate_in_line),
          'flow-out': [this.s_separate_lines, n]
        });
      }

      // [081]
      // s-separate-lines(n) ::=
      //   ( s-l-comments
      //   s-flow-line-prefix(n) )
      //   | s-separate-in-line
      s_separate_lines(n) {
        return this.any(this.all(this.s_l_comments, [this.s_flow_line_prefix, n]), this.rgx(re_s_separate_in_line));
      }

      // [086]
      // ns-yaml-directive ::=
      //   'Y' 'A' 'M' 'L'
      //   s-separate-in-line ns-yaml-version
      ns_yaml_directive() {
        return this.all(this.rgx(RegExp(`(?:YAML${s_separate_in_line})`, "y")), this.ns_yaml_version);
      }

      // [087]
      // ns-yaml-version ::=
      //   ns-dec-digit+ '.' ns-dec-digit+
      ns_yaml_version() {
        return this.rgx(RegExp(`${ns_dec_digit}+\\.${ns_dec_digit}+`, "y"));
      }

      // [088]
      // ns-tag-directive ::=
      //   'T' 'A' 'G'
      //   s-separate-in-line c-tag-handle
      //   s-separate-in-line ns-tag-prefix
      ns_tag_directive() {
        return this.all(this.rgx(RegExp(`TAG${s_separate_in_line}`, "y")), this.c_tag_handle, this.rgx(re_s_separate_in_line), this.ns_tag_prefix);
      }

      c_tag_handle() {
        return this.rgx(re_c_tag_handle);
      }

      // [093]
      // ns-tag-prefix ::=
      //   c-ns-local-tag-prefix | ns-global-tag-prefix
      ns_tag_prefix() {
        return this.rgx(RegExp(`(?:${c_ns_local_tag_prefix}|${ns_global_tag_prefix})`, "y"));
      }

      // [096]
      // c-ns-properties(n,c) ::=
      //   ( c-ns-tag-property
      //   ( s-separate(n,c) c-ns-anchor-property )? )
      //   | ( c-ns-anchor-property
      //   ( s-separate(n,c) c-ns-tag-property )? )
      c_ns_properties(n, c) {
        return this.any(this.all(this.c_ns_tag_property, this.rep(0, 1, this.all([this.s_separate, n, c], this.c_ns_anchor_property))), this.all(this.c_ns_anchor_property, this.rep(0, 1, this.all([this.s_separate, n, c], this.c_ns_tag_property))));
      }

      // [097]
      // c-ns-tag-property ::=
      //   c-verbatim-tag
      //   | c-ns-shorthand-tag
      //   | c-non-specific-tag
      c_ns_tag_property() {
        return this.rgx(RegExp(`(?:${c_verbatim_tag}|${c_ns_shorthand_tag}|${c_non_specific_tag})`, "y"));
      }

      // [101]
      // c-ns-anchor-property ::=
      //   '&' ns-anchor-name
      c_ns_anchor_property() {
        return this.rgx(RegExp(`&${ns_anchor_name}`, "yu"));
      }

      // [104]
      // c-ns-alias-node ::=
      //   '*' ns-anchor-name
      c_ns_alias_node() {
        return this.rgx(RegExp(`\\*${ns_anchor_name}`, "yu"));
      }

      // [106]
      // e-node ::=
      //   e-scalar
      e_node() {
        return this.empty;
      }

      // [109]
      // c-double-quoted(n,c) ::=
      //   '"' nb-double-text(n,c)
      //   '"'
      c_double_quoted(n, c) {
        return this.all(this.chr('"'), [this.nb_double_text, n, c], this.chr('"'));
      }

      // [110]
      // nb-double-text(n,c) ::=
      //   ( c = flow-out => nb-double-multi-line(n) )
      //   ( c = flow-in => nb-double-multi-line(n) )
      //   ( c = block-key => nb-double-one-line )
      //   ( c = flow-key => nb-double-one-line )
      nb_double_text(n, c) {
        return this.case(c, {
          'block-key': this.rgx(re_nb_double_one_line),
          'flow-in': [this.nb_double_multi_line, n],
          'flow-key': this.rgx(re_nb_double_one_line),
          'flow-out': [this.nb_double_multi_line, n]
        });
      }

      // [112]
      // s-double-escaped(n) ::=
      //   s-white* '\'
      //   b-non-content
      //   l-empty(n,flow-in)* s-flow-line-prefix(n)
      s_double_escaped(n) {
        return this.all(this.rgx(RegExp(`${s_white}*\\\\${b_non_content}`, "y")), this.rep2(0, null, [this.l_empty, n, "flow-in"]), [this.s_flow_line_prefix, n]);
      }

      // [115]
      // s-double-next-line(n) ::=
      //   s-double-break(n)
      //   ( ns-double-char nb-ns-double-in-line
      //   ( s-double-next-line(n) | s-white* ) )?
      s_double_next_line(n) {
        return this.all(this.any([this.s_double_escaped, n], [this.s_flow_folded, n]), this.rep(0, 1, this.all(this.rgx(re_ns_double_char), this.rgx(re_nb_ns_double_in_line), this.any([this.s_double_next_line, n], this.rgx(`${s_white}*`)))));
      }

      // [116]
      // nb-double-multi-line(n) ::=
      //   nb-ns-double-in-line
      //   ( s-double-next-line(n) | s-white* )
      nb_double_multi_line(n) {
        return this.all(this.rgx(re_nb_ns_double_in_line), this.any([this.s_double_next_line, n], this.rgx(`${s_white}*`)));
      }

      // [120]
      // c-single-quoted(n,c) ::=
      //   ''' nb-single-text(n,c)
      //   '''
      c_single_quoted(n, c) {
        return this.all(this.chr("'"), [this.nb_single_text, n, c], this.chr("'"));
      }

      // [121]
      // nb-single-text(n,c) ::=
      //   ( c = flow-out => nb-single-multi-line(n) )
      //   ( c = flow-in => nb-single-multi-line(n) )
      //   ( c = block-key => nb-single-one-line )
      //   ( c = flow-key => nb-single-one-line )
      nb_single_text(n, c) {
        return this.case(c, {
          'block-key': this.rgx(re_nb_single_one_line),
          'flow-in': [this.nb_single_multi_line, n],
          'flow-key': this.rgx(re_nb_single_one_line),
          'flow-out': [this.nb_single_multi_line, n]
        });
      }

      s_single_next_line(n) {
        return this.all([this.s_flow_folded, n], this.rep(0, 1, this.all(this.rgx(re_s_single_next_line), this.any([this.s_single_next_line, n], this.rgx(`${s_white}*`)))));
      }

      // [125]
      // nb-single-multi-line(n) ::=
      //   nb-ns-single-in-line
      //   ( s-single-next-line(n) | s-white* )
      nb_single_multi_line(n) {
        return this.all(this.rgx(re_nb_ns_single_in_line), this.any([this.s_single_next_line, n], this.rgx(`${s_white}*`)));
      }

      // [126]
      // ns-plain-first(c) ::=
      //   ( ns-char - c-indicator )
      //   | ( ( '?' | ':' | '-' )
      //   <followed_by_an_ns-plain-safe(c)> )
      ns_plain_first(c) {
        return this.any(this.rgx(RegExp(`(?!${c_indicator})${ns_char}`, "yu")), this.all(this.rgx(/[?:-]/y), this.chk('=', [this.ns_plain_safe, c])));
      }

      // [127]
      // ns-plain-safe(c) ::=
      //   ( c = flow-out => ns-plain-safe-out )
      //   ( c = flow-in => ns-plain-safe-in )
      //   ( c = block-key => ns-plain-safe-out )
      //   ( c = flow-key => ns-plain-safe-in )
      ns_plain_safe(c) {
        return this.case(c, {
          'block-key': this.rgx(re_ns_plain_safe_out),
          'flow-in': this.rgx(re_ns_plain_safe_in),
          'flow-key': this.rgx(re_ns_plain_safe_in),
          'flow-out': this.rgx(re_ns_plain_safe_out)
        });
      }

      // [130]
      // ns-plain-char(c) ::=
      //   ( ns-plain-safe(c) - ':' - '#' )
      //   | ( <an_ns-char_preceding> '#' )
      //   | ( ':' <followed_by_an_ns-plain-safe(c)> )
      ns_plain_char(c) {
        return this.any(this.but([this.ns_plain_safe, c], this.chr(':'), this.chr('#')), this.all(this.chk('<=', this.rgx(re_ns_char)), this.chr('#')), this.all(this.chr(':'), this.chk('=', [this.ns_plain_safe, c])));
      }

      // [131]
      // ns-plain(n,c) ::=
      //   ( c = flow-out => ns-plain-multi-line(n,c) )
      //   ( c = flow-in => ns-plain-multi-line(n,c) )
      //   ( c = block-key => ns-plain-one-line(c) )
      //   ( c = flow-key => ns-plain-one-line(c) )
      ns_plain(n, c) {
        return this.case(c, {
          'block-key': [this.ns_plain_one_line, c],
          'flow-in': [this.ns_plain_multi_line, n, c],
          'flow-key': [this.ns_plain_one_line, c],
          'flow-out': [this.ns_plain_multi_line, n, c]
        });
      }

      // [132]
      // nb-ns-plain-in-line(c) ::=
      //   ( s-white*
      //   ns-plain-char(c) )*
      nb_ns_plain_in_line(c) {
        return this.rep(0, null, this.all(this.rgx(`${s_white}*`), [this.ns_plain_char, c]));
      }

      // [133]
      // ns-plain-one-line(c) ::=
      //   ns-plain-first(c)
      //   nb-ns-plain-in-line(c)
      ns_plain_one_line(c) {
        return this.all([this.ns_plain_first, c], [this.nb_ns_plain_in_line, c]);
      }

      // [134]
      // s-ns-plain-next-line(n,c) ::=
      //   s-flow-folded(n)
      //   ns-plain-char(c) nb-ns-plain-in-line(c)
      s_ns_plain_next_line(n, c) {
        return this.all([this.s_flow_folded, n], [this.ns_plain_char, c], [this.nb_ns_plain_in_line, c]);
      }

      // [135]
      // ns-plain-multi-line(n,c) ::=
      //   ns-plain-one-line(c)
      //   s-ns-plain-next-line(n,c)*
      ns_plain_multi_line(n, c) {
        return this.all([this.ns_plain_one_line, c], this.rep(0, null, [this.s_ns_plain_next_line, n, c]));
      }

      // [136]
      // in-flow(c) ::=
      //   ( c = flow-out => flow-in )
      //   ( c = flow-in => flow-in )
      //   ( c = block-key => flow-key )
      //   ( c = flow-key => flow-key )
      in_flow(c) {
        return this.flip(c, {
          'block-key': "flow-key",
          'flow-in': "flow-in",
          'flow-key': "flow-key",
          'flow-out': "flow-in"
        });
      }

      // [137]
      // c-flow-sequence(n,c) ::=
      //   '[' s-separate(n,c)?
      //   ns-s-flow-seq-entries(n,in-flow(c))? ']'
      c_flow_sequence(n, c) {
        return this.all(this.chr('['), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_seq_entries, n, [this.in_flow, c]]), this.chr(']'));
      }

      // [138]
      // ns-s-flow-seq-entries(n,c) ::=
      //   ns-flow-seq-entry(n,c)
      //   s-separate(n,c)?
      //   ( ',' s-separate(n,c)?
      //   ns-s-flow-seq-entries(n,c)? )?
      ns_s_flow_seq_entries(n, c) {
        return this.all([this.ns_flow_seq_entry, n, c], this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_seq_entries, n, c]))));
      }

      // [139]
      // ns-flow-seq-entry(n,c) ::=
      //   ns-flow-pair(n,c) | ns-flow-node(n,c)
      ns_flow_seq_entry(n, c) {
        return this.any([this.ns_flow_pair, n, c], [this.ns_flow_node, n, c]);
      }

      // [140]
      // c-flow-mapping(n,c) ::=
      //   '{' s-separate(n,c)?
      //   ns-s-flow-map-entries(n,in-flow(c))? '}'
      c_flow_mapping(n, c) {
        return this.all(this.chr('{'), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_map_entries, n, [this.in_flow, c]]), this.chr('}'));
      }

      // [141]
      // ns-s-flow-map-entries(n,c) ::=
      //   ns-flow-map-entry(n,c)
      //   s-separate(n,c)?
      //   ( ',' s-separate(n,c)?
      //   ns-s-flow-map-entries(n,c)? )?
      ns_s_flow_map_entries(n, c) {
        return this.all([this.ns_flow_map_entry, n, c], this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_map_entries, n, c]))));
      }

      // [142]
      // ns-flow-map-entry(n,c) ::=
      //   ( '?' s-separate(n,c)
      //   ns-flow-map-explicit-entry(n,c) )
      //   | ns-flow-map-implicit-entry(n,c)
      ns_flow_map_entry(n, c) {
        return this.any(this.all(this.rgx(RegExp(`\\?${ws_lookahead}`, "y")), [this.s_separate, n, c], [this.ns_flow_map_explicit_entry, n, c]), [this.ns_flow_map_implicit_entry, n, c]);
      }

      // [143]
      // ns-flow-map-explicit-entry(n,c) ::=
      //   ns-flow-map-implicit-entry(n,c)
      //   | ( e-node
      //   e-node )
      ns_flow_map_explicit_entry(n, c) {
        return this.any([this.ns_flow_map_implicit_entry, n, c], this.all(this.e_node, this.e_node));
      }

      // [144]
      // ns-flow-map-implicit-entry(n,c) ::=
      //   ns-flow-map-yaml-key-entry(n,c)
      //   | c-ns-flow-map-empty-key-entry(n,c)
      //   | c-ns-flow-map-json-key-entry(n,c)
      ns_flow_map_implicit_entry(n, c) {
        return this.any([this.ns_flow_map_yaml_key_entry, n, c], [this.c_ns_flow_map_empty_key_entry, n, c], [this.c_ns_flow_map_json_key_entry, n, c]);
      }

      // [145]
      // ns-flow-map-yaml-key-entry(n,c) ::=
      //   ns-flow-yaml-node(n,c)
      //   ( ( s-separate(n,c)?
      //   c-ns-flow-map-separate-value(n,c) )
      //   | e-node )
      ns_flow_map_yaml_key_entry(n, c) {
        return this.all([this.ns_flow_yaml_node, n, c], this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.c_ns_flow_map_separate_value, n, c]), this.e_node));
      }

      // [146]
      // c-ns-flow-map-empty-key-entry(n,c) ::=
      //   e-node
      //   c-ns-flow-map-separate-value(n,c)
      c_ns_flow_map_empty_key_entry(n, c) {
        return this.all(this.e_node, [this.c_ns_flow_map_separate_value, n, c]);
      }

      // [147]
      // c-ns-flow-map-separate-value(n,c) ::=
      //   ':' <not_followed_by_an_ns-plain-safe(c)>
      //   ( ( s-separate(n,c) ns-flow-node(n,c) )
      //   | e-node )
      c_ns_flow_map_separate_value(n, c) {
        return this.all(this.chr(':'), this.chk('!', [this.ns_plain_safe, c]), this.any(this.all([this.s_separate, n, c], [this.ns_flow_node, n, c]), this.e_node));
      }

      // [148]
      // c-ns-flow-map-json-key-entry(n,c) ::=
      //   c-flow-json-node(n,c)
      //   ( ( s-separate(n,c)?
      //   c-ns-flow-map-adjacent-value(n,c) )
      //   | e-node )
      c_ns_flow_map_json_key_entry(n, c) {
        return this.all([this.c_flow_json_node, n, c], this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.c_ns_flow_map_adjacent_value, n, c]), this.e_node));
      }

      // [149]
      // c-ns-flow-map-adjacent-value(n,c) ::=
      //   ':' ( (
      //   s-separate(n,c)?
      //   ns-flow-node(n,c) )
      //   | e-node )
      c_ns_flow_map_adjacent_value(n, c) {
        return this.all(this.chr(':'), this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.ns_flow_node, n, c]), this.e_node));
      }

      // [150]
      // ns-flow-pair(n,c) ::=
      //   ( '?' s-separate(n,c)
      //   ns-flow-map-explicit-entry(n,c) )
      //   | ns-flow-pair-entry(n,c)
      ns_flow_pair(n, c) {
        return this.any(this.all(this.rgx(RegExp(`\\?${ws_lookahead}`)), [this.s_separate, n, c], [this.ns_flow_map_explicit_entry, n, c]), [this.ns_flow_pair_entry, n, c]);
      }

      // [151]
      // ns-flow-pair-entry(n,c) ::=
      //   ns-flow-pair-yaml-key-entry(n,c)
      //   | c-ns-flow-map-empty-key-entry(n,c)
      //   | c-ns-flow-pair-json-key-entry(n,c)
      ns_flow_pair_entry(n, c) {
        return this.any([this.ns_flow_pair_yaml_key_entry, n, c], [this.c_ns_flow_map_empty_key_entry, n, c], [this.c_ns_flow_pair_json_key_entry, n, c]);
      }

      // [152]
      // ns-flow-pair-yaml-key-entry(n,c) ::=
      //   ns-s-implicit-yaml-key(flow-key)
      //   c-ns-flow-map-separate-value(n,c)
      ns_flow_pair_yaml_key_entry(n, c) {
        return this.all([this.ns_s_implicit_yaml_key, "flow-key"], [this.c_ns_flow_map_separate_value, n, c]);
      }

      // [153]
      // c-ns-flow-pair-json-key-entry(n,c) ::=
      //   c-s-implicit-json-key(flow-key)
      //   c-ns-flow-map-adjacent-value(n,c)
      c_ns_flow_pair_json_key_entry(n, c) {
        return this.all([this.c_s_implicit_json_key, "flow-key"], [this.c_ns_flow_map_adjacent_value, n, c]);
      }

      // [154]
      // ns-s-implicit-yaml-key(c) ::=
      //   ns-flow-yaml-node(n/a,c)
      //   s-separate-in-line?
      //   <at_most_1024_characters_altogether>
      ns_s_implicit_yaml_key(c) {
        return this.all(this.max(1024), [this.ns_flow_yaml_node, null, c], this.rep(0, 1, this.rgx(re_s_separate_in_line)));
      }

      // [155]
      // c-s-implicit-json-key(c) ::=
      //   c-flow-json-node(n/a,c)
      //   s-separate-in-line?
      //   <at_most_1024_characters_altogether>
      c_s_implicit_json_key(c) {
        return this.all(this.max(1024), [this.c_flow_json_node, null, c], this.rep(0, 1, this.rgx(re_s_separate_in_line)));
      }

      // [156]
      // ns-flow-yaml-content(n,c) ::=
      //   ns-plain(n,c)
      ns_flow_yaml_content(n, c) {
        return [this.ns_plain, n, c];
      }

      // [157]
      // c-flow-json-content(n,c) ::=
      //   c-flow-sequence(n,c) | c-flow-mapping(n,c)
      //   | c-single-quoted(n,c) | c-double-quoted(n,c)
      c_flow_json_content(n, c) {
        return this.any([this.c_flow_sequence, n, c], [this.c_flow_mapping, n, c], [this.c_single_quoted, n, c], [this.c_double_quoted, n, c]);
      }

      // [158]
      // ns-flow-content(n,c) ::=
      //   ns-flow-yaml-content(n,c) | c-flow-json-content(n,c)
      ns_flow_content(n, c) {
        return this.any([this.ns_flow_yaml_content, n, c], [this.c_flow_json_content, n, c]);
      }

      // [159]
      // ns-flow-yaml-node(n,c) ::=
      //   c-ns-alias-node
      //   | ns-flow-yaml-content(n,c)
      //   | ( c-ns-properties(n,c)
      //   ( ( s-separate(n,c)
      //   ns-flow-yaml-content(n,c) )
      //   | e-scalar ) )
      ns_flow_yaml_node(n, c) {
        return this.any(this.c_ns_alias_node, [this.ns_flow_yaml_content, n, c], this.all([this.c_ns_properties, n, c], this.any(this.all([this.s_separate, n, c], [this.ns_flow_content, n, c]), this.e_node)));
      }

      // [160]
      // c-flow-json-node(n,c) ::=
      //   ( c-ns-properties(n,c)
      //   s-separate(n,c) )?
      //   c-flow-json-content(n,c)
      c_flow_json_node(n, c) {
        return this.all(this.rep(0, 1, this.all([this.c_ns_properties, n, c], [this.s_separate, n, c])), [this.c_flow_json_content, n, c]);
      }

      // [161]
      // ns-flow-node(n,c) ::=
      //   c-ns-alias-node
      //   | ns-flow-content(n,c)
      //   | ( c-ns-properties(n,c)
      //   ( ( s-separate(n,c)
      //   ns-flow-content(n,c) )
      //   | e-scalar ) )
      ns_flow_node(n, c) {
        return this.any(this.c_ns_alias_node, [this.ns_flow_content, n, c], this.all([this.c_ns_properties, n, c], this.any(this.all([this.s_separate, n, c], [this.ns_flow_content, n, c]), this.e_node)));
      }

      // [162]
      // c-b-block-header(m,t) ::=
      //   ( ( c-indentation-indicator(m)
      //   c-chomping-indicator(t) )
      //   | ( c-chomping-indicator(t)
      //   c-indentation-indicator(m) ) )
      //   s-b-comment
      c_b_block_header(n) {
        return this.all(this.any(this.all([this.c_indentation_indicator, n], this.c_chomping_indicator, this.rgx(ws_lookahead)), this.all(this.c_chomping_indicator, [this.c_indentation_indicator, n], this.rgx(ws_lookahead))), this.s_b_comment);
      }

      // [163]
      // c-indentation-indicator(m) ::=
      //   ( ns-dec-digit => m = ns-dec-digit - x:30 )
      //   ( <empty> => m = auto-detect() )
      c_indentation_indicator(n) {
        return this.any(this.if(this.rng("\x31", "\x39"), this.set('m', this.ord(this.match))), this.if(this.empty, this.set('m', [this.auto_detect, n])));
      }

      // [164]
      // c-chomping-indicator(t) ::=
      //   ( '-' => t = strip )
      //   ( '+' => t = keep )
      //   ( <empty> => t = clip )
      c_chomping_indicator() {
        return this.any(this.if(this.chr('-'), this.set('t', "strip")), this.if(this.chr('+'), this.set('t', "keep")), this.if(this.empty, this.set('t', "clip")));
      }

      // [165]
      // b-chomped-last(t) ::=
      //   ( t = strip => b-non-content | <end_of_file> )
      //   ( t = clip => b-as-line-feed | <end_of_file> )
      //   ( t = keep => b-as-line-feed | <end_of_file> )
      b_chomped_last(t) {
        return this.case(t, {
          'clip': this.any(this.rgx(re_b_as_line_feed), this.end_of_stream),
          'keep': this.any(this.rgx(re_b_as_line_feed), this.end_of_stream),
          'strip': this.any(this.rgx(re_b_non_content), this.end_of_stream)
        });
      }

      // [166]
      // l-chomped-empty(n,t) ::=
      //   ( t = strip => l-strip-empty(n) )
      //   ( t = clip => l-strip-empty(n) )
      //   ( t = keep => l-keep-empty(n) )
      l_chomped_empty(n, t) {
        return this.case(t, {
          'clip': [this.l_strip_empty, n],
          'keep': [this.l_keep_empty, n],
          'strip': [this.l_strip_empty, n]
        });
      }

      // [167]
      // l-strip-empty(n) ::=
      //   ( s-indent(<=n) b-non-content )*
      //   l-trail-comments(n)?
      l_strip_empty(n) {
        return this.all(this.rep(0, null, this.all([this.s_indent_le, n], this.rgx(re_b_non_content))), this.rep2(0, 1, [this.l_trail_comments, n]));
      }

      // [168]
      // l-keep-empty(n) ::=
      //   l-empty(n,block-in)*
      //   l-trail-comments(n)?
      l_keep_empty(n) {
        return this.all(this.rep(0, null, [this.l_empty, n, "block-in"]), this.rep2(0, 1, [this.l_trail_comments, n]));
      }

      l_trail_comments(n) {
        return this.all([this.s_indent_lt, n], this.rgx(re_l_trail_comments), this.rep(0, null, this.l_comment));
      }

      // [170]
      // c-l+literal(n) ::=
      //   '|' c-b-block-header(m,t)
      //   l-literal-content(n+m,t)
      c_l_literal(n) {
        return this.all(this.chr('|'), [this.c_b_block_header, n], [this.l_literal_content, this.add(n, this.m()), this.t()]);
      }

      // [171]
      // l-nb-literal-text(n) ::=
      //   l-empty(n,block-in)*
      //   s-indent(n) nb-char+
      l_nb_literal_text(n) {
        return this.all(this.rep(0, null, [this.l_empty, n, "block-in"]), this.rgx(s_indent_n(n)), this.rep2(1, null, this.rgx(re_nb_char)));
      }

      // [172]
      // b-nb-literal-next(n) ::=
      //   b-as-line-feed
      //   l-nb-literal-text(n)
      b_nb_literal_next(n) {
        return this.all(this.rgx(re_b_as_line_feed), [this.l_nb_literal_text, n]);
      }

      // [173]
      // l-literal-content(n,t) ::=
      //   ( l-nb-literal-text(n)
      //   b-nb-literal-next(n)*
      //   b-chomped-last(t) )?
      //   l-chomped-empty(n,t)
      l_literal_content(n, t) {
        return this.all(this.rep(0, 1, this.all([this.l_nb_literal_text, n], this.rep(0, null, [this.b_nb_literal_next, n]), [this.b_chomped_last, t])), [this.l_chomped_empty, n, t]);
      }

      // [174]
      // c-l+folded(n) ::=
      //   '>' c-b-block-header(m,t)
      //   l-folded-content(n+m,t)
      c_l_folded(n) {
        return this.all(this.chr('>'), [this.c_b_block_header, n], [this.l_folded_content, this.add(n, this.m()), this.t()]);
      }

      // [175]
      // s-nb-folded-text(n) ::=
      //   s-indent(n) ns-char
      //   nb-char*

        // XXX Can't eliminate this yet for some reason.
      ns_char() {
        return this.rgx(re_ns_char);
      }

      s_nb_folded_text(n) {
        return this.all(this.rgx(s_indent_n(n)), this.ns_char, this.rep(0, null, this.rgx(re_nb_char))); // XXX only used here
      }

      // [176]
      // l-nb-folded-lines(n) ::=
      //   s-nb-folded-text(n)
      //   ( b-l-folded(n,block-in) s-nb-folded-text(n) )*
      l_nb_folded_lines(n) {
        return this.all([this.s_nb_folded_text, n], this.rep(0, null, this.all([this.b_l_folded, n, "block-in"], [this.s_nb_folded_text, n])));
      }

      // [177]
      // s-nb-spaced-text(n) ::=
      //   s-indent(n) s-white
      //   nb-char*

        // XXX renaming this or eliminating it causes tests to fail. :\
      s_white() {
        return this.rgx(RegExp(`[${s_space}\\t]`, "y"));
      }

      s_nb_spaced_text(n) {
        return this.all(this.rgx(s_indent_n(n)), this.s_white, this.rep(0, null, this.rgx(re_nb_char))); // XXX only used here
      }

      // [178]
      // b-l-spaced(n) ::=
      //   b-as-line-feed
      //   l-empty(n,block-in)*
      b_l_spaced(n) {
        return this.all(this.rgx(re_b_as_line_feed), this.rep(0, null, [this.l_empty, n, "block-in"]));
      }

      // [179]
      // l-nb-spaced-lines(n) ::=
      //   s-nb-spaced-text(n)
      //   ( b-l-spaced(n) s-nb-spaced-text(n) )*
      l_nb_spaced_lines(n) {
        return this.all([this.s_nb_spaced_text, n], this.rep(0, null, this.all([this.b_l_spaced, n], [this.s_nb_spaced_text, n])));
      }

      // [180]
      // l-nb-same-lines(n) ::=
      //   l-empty(n,block-in)*
      //   ( l-nb-folded-lines(n) | l-nb-spaced-lines(n) )
      l_nb_same_lines(n) {
        return this.all(this.rep(0, null, [this.l_empty, n, "block-in"]), this.any([this.l_nb_folded_lines, n], [this.l_nb_spaced_lines, n]));
      }

      // [181]
      // l-nb-diff-lines(n) ::=
      //   l-nb-same-lines(n)
      //   ( b-as-line-feed l-nb-same-lines(n) )*
      l_nb_diff_lines(n) {
        return this.all([this.l_nb_same_lines, n], this.rep(0, null, this.all(this.rgx(re_b_as_line_feed), [this.l_nb_same_lines, n])));
      }

      // [182]
      // l-folded-content(n,t) ::=
      //   ( l-nb-diff-lines(n)
      //   b-chomped-last(t) )?
      //   l-chomped-empty(n,t)
      l_folded_content(n, t) {
        return this.all(this.rep(0, 1, this.all([this.l_nb_diff_lines, n], [this.b_chomped_last, t])), [this.l_chomped_empty, n, t]);
      }

    };

    // Helper functions:

    // Generate required regular expression and string variants:
    r = function(rgx) {
      var chars, regexp, str;
      str = String(rgx);
      if (str.match(/undefined/)) {
        die((new Error(`Bad regex '${rgx}'`)).stack);
      }
      if (str.endsWith('u')) {
        str = str.slice(0, -1);
      }
      str = String(str).slice(1, -1);
      chars = str.slice(1, -1);
      regexp = RegExp(`${str}`, "yum");
      return [str, regexp, chars];
    };

    start_of_line = '^';

    end_of_file = '$';

    init = [];

    // [004]
    // document-start-indicator ::=
    //   "---"
    [document_start_indicator, re_document_start_indicator] = [];

    init.push(function() {
      return [document_start_indicator, re_document_start_indicator] = r(RegExp(`---${ws_lookahead}`));
    });

    // [005]
    // document-end-indicator ::=
    //   "..."                             # Not followed by non-ws char
    [document_end_indicator, re_document_end_indicator] = r(/\.\.\./);

    //------------------------------------------------------------------------------
    // [001]
    // c-printable ::=
    //   x:9 | x:A | x:D | [x:20-x:7E]
    //   | x:85 | [x:A0-x:D7FF] | [x:E000-x:FFFD]
    //   | [x:10000-x:10FFFF]
    [c_printable] = r(/[\x09\x0A\x0D\x20-\x7E\x85\xA0-\uD7FF\uE000-\uFFFD\u{10000}-\u{10FFFF}]/u);

    // [002]
    // nb-json ::=
    //   x:9 | [x:20-x:10FFFF]
    [nb_json] = r(/[\x09\x20-\u{10FFFF}]/u);

    // [003]
    // c-byte-order-mark ::=
    //   x:FEFF
    c_byte_order_mark = "\u{FEFF}";

    // [022]               # XXX rule not in 1.3
    // c-indicator ::=
    //   '-' | '?' | ':' | ',' | '[' | ']' | '{' | '}'
    //   | '#' | '&' | '*' | '!' | '|' | '>' | ''' | '"'
    //   | '%' | '@' | '`'
    [c_indicator] = r(/[-?:,[\]{}\x23&*!|>'"%@`]/); // '#'

    // [023]
    // c-flow-indicator ::=
    //   ',' | '[' | ']' | '{' | '}'
    [c_flow_indicator, , c_flow_indicator_s] = r(/[,[\]{}]/);

    // [026]
    // b-char ::=
    //   b-line-feed | b-carriage-return
    [b_char, re_b_char, b_char_s] = r(/[\x0A\x0D]/);

    // [027]
    // nb-char ::=
    //   c-printable - b-char - c-byte-order-mark
    [nb_char, re_nb_char] = r(RegExp(`(?:(?![${b_char_s}${c_byte_order_mark}])${c_printable})`, "u"));

    // [028]
    // b-break ::=
    //   ( b-carriage-return b-line-feed )
    //   | b-carriage-return
    //   | b-line-feed
    [b_break, re_b_break] = r(/(?:(?:\x0D\x0A)|\x0D|\x0A)/);

    // [029]
    // b-as-line-feed ::=
    //   b-break
    re_b_as_line_feed = re_b_break;

    // [030]
    // b-non-content ::=
    //   b-break
    b_non_content = b_break;

    re_b_non_content = re_b_break;

    // [031]
    // s-space ::=
    //   x:20
    s_space = "\x20";

    // [033]
    // s-white ::=
    //   s-space | s-tab
    [s_white] = r(RegExp(`[${s_space}\\t]`));

    [ws_lookahead] = r(RegExp(`(?=${end_of_file}|${s_white}|${b_break})`));

    // [034]
    // ns-char ::=
    //   nb-char - s-white
    [ns_char, re_ns_char] = r(RegExp(`(?:(?!${s_white})${nb_char})`, "u"));

    // [035]
    // ns-dec-digit ::=
    //   [x:30-x:39]
    [ns_dec_digit, , ns_dec_digit_s] = r(/[0-9]/);

    // [036]
    // ns-hex-digit ::=
    //   ns-dec-digit
    //   | [x:41-x:46] | [x:61-x:66]
    [ns_hex_digit] = r(RegExp(`[${ns_dec_digit_s}A-Fa-f]`));

    [
      ,
      ,
      // [037]
      // ns-ascii-letter ::=
      //   [x:41-x:5A] | [x:61-x:7A]
      ns_ascii_letter_s
    ] = r(/[A-Za-z]/);

    // [038]
    // ns-word-char ::=
    //   ns-dec-digit | ns-ascii-letter | '-'
    [ns_word_char, , ns_word_char_s] = r(RegExp(`[${ns_dec_digit_s}${ns_ascii_letter_s}\\-]`));

    // [039]
    // ns-uri-char ::=
    //   '%' ns-hex-digit ns-hex-digit | ns-word-char | '#'
    //   | ';' | '/' | '?' | ':' | '@' | '&' | '=' | '+' | '$' | ','
    //   | '_' | '.' | '!' | '~' | '*' | ''' | '(' | ')' | '[' | ']'
    [ns_uri_char] = r(RegExp(`(?:%${ns_hex_digit}{2}|[${ns_word_char_s}\\x23;/?:@&=+$,_.!~*'()[\\]])`));

    // [040]
    // ns-tag-char ::=
    //   ns-uri-char - '!' - c-flow-indicator
    [ns_tag_char] = r(RegExp(`(?:(?![!${c_flow_indicator_s}])${ns_uri_char})`));

    // [062]
    // c-ns-esc-char ::=
    //   '\'
    //   ( ns-esc-null | ns-esc-bell | ns-esc-backspace
    //   | ns-esc-horizontal-tab | ns-esc-line-feed
    //   | ns-esc-vertical-tab | ns-esc-form-feed
    //   | ns-esc-carriage-return | ns-esc-escape | ns-esc-space
    //   | ns-esc-double-quote | ns-esc-slash | ns-esc-backslash
    //   | ns-esc-next-line | ns-esc-non-breaking-space
    //   | ns-esc-line-separator | ns-esc-paragraph-separator
    //   | ns-esc-8-bit | ns-esc-16-bit | ns-esc-32-bit )
    [c_ns_esc_char] = r(RegExp(`\\\\(?:[0abt\\tnvfre\\x20"/\\\\N_LP]|x${ns_hex_digit}{2}|u${ns_hex_digit}{4}|U${ns_hex_digit}{8})`));

    [
      ,
      // [063]
      re_s_indent
    ] = r(RegExp(`${s_space}*`));

    s_indent_n = function(n) {
      return RegExp(`${s_space}{${n}}`, "y");
    };

    // [066]
    // s-separate-in-line ::=
    //   s-white+ | <start_of_line>
    [s_separate_in_line, re_s_separate_in_line] = r(RegExp(`(?:${s_white}+|${start_of_line})`));

    // [072]
    // b-as-space ::=
    //   b-break
    re_b_as_space = re_b_break;

    // [075]
    // c-nb-comment-text ::=
    //   '#' nb-char*
    [c_nb_comment_text] = r(RegExp(`(?:\\x23${nb_char}*)`, "u"));

    // [076]
    // b-comment ::=
    //   b-non-content | <end_of_file>
    [b_comment, re_b_comment] = r(RegExp(`(?:${b_non_content}|${end_of_file})`));

    // [084]
    // ns-directive-name ::=
    //   ns-char+
    [ns_directive_name] = r(RegExp(`${ns_char}+`, "u"));

    // [085]
    // ns-directive-parameter ::=
    //   ns-char+
    [ns_directive_parameter] = r(RegExp(`${ns_char}+`, "u"));

    [
      ,
      // [083]
      // ns-reserved-directive ::=
      //   ns-directive-name
      //   ( s-separate-in-line ns-directive-parameter )*
      re_ns_reserved_directive
    ] = r(RegExp(`${ns_directive_name}(?:${s_separate_in_line}${ns_directive_parameter})*`, "u"));

    // [090]
    // c-primary-tag-handle ::=
    //   '!'
    c_primary_tag_handle = "!";

    // [091]
    // c-secondary-tag-handle ::=
    //   '!' '!'
    c_secondary_tag_handle = "!!";

    // [092]
    // c-named-tag-handle ::=
    //   '!' ns-word-char+ '!'
    [c_named_tag_handle] = r(RegExp(`!${ns_word_char}+!`));

    // [089]
    // c-tag-handle ::=
    //   c-named-tag-handle
    //   | c-secondary-tag-handle
    //   | c-primary-tag-handle
    [c_tag_handle, re_c_tag_handle] = r(RegExp(`(?:${c_named_tag_handle}|${c_secondary_tag_handle}|${c_primary_tag_handle})`));

    // [094]
    // c-ns-local-tag-prefix ::=
    //   '!' ns-uri-char*
    [c_ns_local_tag_prefix] = r(RegExp(`!${ns_uri_char}*`));

    // [095]
    // ns-global-tag-prefix ::=
    //   ns-tag-char ns-uri-char*
    [ns_global_tag_prefix] = r(RegExp(`${ns_tag_char}${ns_uri_char}*`));

    // [098]
    // c-verbatim-tag ::=
    //   '!' '<' ns-uri-char+ '>'
    [c_verbatim_tag] = r(RegExp(`(?:!<${ns_uri_char}+>)`));

    // [099]
    // c-ns-shorthand-tag ::=
    //   c-tag-handle ns-tag-char+
    [c_ns_shorthand_tag] = r(RegExp(`(${c_tag_handle}${ns_tag_char}+)`));

    // [100]
    // c-non-specific-tag ::=
    //   '!'
    c_non_specific_tag = "!";

    // [102]
    // ns-anchor-char ::=
    //   ns-char - c-flow-indicator
    [ns_anchor_char] = r(RegExp(`(?:(?!${c_flow_indicator})${ns_char})+`, "u"));

    // [103]
    // ns-anchor-name ::=
    //   ns-anchor-char+
    [ns_anchor_name] = r(RegExp(`(?:${ns_anchor_char})+`, "u"));

    // [107]
    // nb-double-char ::=
    //   c-ns-esc-char | ( nb-json - '\' - '"' )
    [nb_double_char] = r(RegExp(`(?:${c_ns_esc_char}|(?![\\\\"])${nb_json})`));

    // [108]
    // ns-double-char ::=
    //   nb-double-char - s-white
    [ns_double_char, re_ns_double_char] = r(RegExp(`(?!${s_white})${nb_double_char}`));

    [
      ,
      // [111]
      // nb-double-one-line ::=
      //   nb-double-char*
      re_nb_double_one_line
    ] = r(RegExp(`${nb_double_char}*`));

    [
      ,
      // [114]
      // nb-ns-double-in-line ::=
      //   ( s-white* ns-double-char )*
      re_nb_ns_double_in_line
    ] = r(RegExp(`(?:${s_white}*${ns_double_char})*`));

    // [117]
    // c-quoted-quote ::=
    //   ''' '''
    [c_quoted_quote] = r(/''/);

    // [118]
    // nb-single-char ::=
    //   c-quoted-quote | ( nb-json - ''' )
    [nb_single_char] = r(RegExp(`(?:${c_quoted_quote}|(?:(?!')${nb_json}))`));

    // [119]
    // ns-single-char ::=
    //   nb-single-char - s-white
    [ns_single_char] = r(RegExp(`(?:(?!${s_white})${nb_single_char})`));

    [
      ,
      // [122]
      // nb-single-one-line ::=
      //   nb-single-char*
      re_nb_single_one_line
    ] = r(RegExp(`${nb_single_char}*`));

    // [123]
    // nb-ns-single-in-line ::=
    //   ( s-white* ns-single-char )*
    [nb_ns_single_in_line, re_nb_ns_single_in_line] = r(RegExp(`(?:${s_white}*${ns_single_char})*`));

    [
      ,
      // [124]
      // s-single-next-line(n) ::=
      //   s-flow-folded(n)
      //   ( ns-single-char nb-ns-single-in-line
      //   ( s-single-next-line(n) | s-white* ) )?
      re_s_single_next_line
    ] = r(RegExp(`${ns_single_char}${nb_ns_single_in_line}`));

    [
      ,
      // [128]
      // ns-plain-safe-out ::=
      //   ns-char
      re_ns_plain_safe_out
    ] = r(RegExp(`(?:${ns_char})`, "u"));

    [
      ,
      // [129]
      // ns-plain-safe-in ::=
      //   ns-char - c-flow-indicator
      re_ns_plain_safe_in
    ] = r(RegExp(`(?:(?!${c_flow_indicator})${ns_char})`, "u"));

    [
      ,
      // [169]
      // l-trail-comments(n) ::=
      //   s-indent(<n)
      //   c-nb-comment-text b-comment
      //   l-comment*
      re_l_trail_comments
    ] = r(RegExp(`${c_nb_comment_text}${b_comment}`, "u"));

    for (i = 0, len = init.length; i < len; i++) {
      func = init[i];
      func();
    }

    return Grammar;

  }).call(this);

}).call(this);
