// Generated by CoffeeScript 2.5.1
(function() {
  /*
  This grammar class was generated from https://yaml.org/spec/1.2/spec.html
  */
  var Grammar;

  global.Grammar = Grammar = (function() {
    var b_carriage_return, b_char, b_char_s, b_comment, b_line_feed, c_byte_order_mark, c_directives_end, c_document_end, c_flow_indicator, c_indicator, c_named_tag_handle, c_nb_comment_text, c_ns_esc_char, c_ns_local_tag_prefix, c_primary_tag_handle, c_printable, c_quoted_quote, c_secondary_tag_handle, c_tag_handle, line_break, nb_char, nb_double_char, nb_json, nb_ns_single_in_line, nb_single_char, ns_anchor_name, ns_ascii_letter_s, ns_char, ns_dec_digit, ns_dec_digit_s, ns_directive_name, ns_directive_parameter, ns_double_char, ns_global_tag_prefix, ns_hex_digit, ns_single_char, ns_tag_char, ns_uri_char, ns_word_char, ns_word_char_s, r2c, r2s, re_b_char, re_b_comment, re_c_directives_end, re_c_document_end, re_c_forbidden, re_c_ns_alias_node, re_c_ns_anchor_property, re_c_tag_handle, re_line_break, re_nb_char, re_nb_double_one_line, re_nb_ns_double_in_line, re_nb_ns_single_in_line, re_nb_single_one_line, re_ns_ascii_letter, re_ns_char, re_ns_dec_digit, re_ns_double_char, re_ns_flow_map_entry, re_ns_flow_pair, re_ns_plain_safe_in, re_ns_reserved_directive, re_ns_tag_prefix, re_ns_word_char, re_ns_yaml_directive, re_ns_yaml_version, re_s_indent, re_s_indent_n, re_s_white, s_separate_spaces, s_space, s_white, ws_lookahead;

    class Grammar {
      TOP() {
        return this.l_yaml_stream;
      }

      nb_char() {
        // debug_rule("nb_char")
        return this.rgx(re_nb_char);
      }

      // [029]
      // b-as-line-feed ::=
      //   b-break
      b_as_line_feed() {
        // debug_rule("b_as_line_feed")
        return this.rgx(re_line_break);
      }

      s_white() {
        // debug_rule("s_white")
        return this.rgx(re_s_white);
      }

      ns_char() {
        // debug_rule("ns_char")
        return this.rgx(re_ns_char);
      }

      // [064]
      // s-indent(<n) ::=
      //   s-space{m} <where_m_<_n>
      s_indent_lt(n) {
        // debug_rule("s_indent_lt",n)
        return this.all(this.rgx(re_s_indent), this.lt(this.len(this.match), n));
      }

      // [065]
      // s-indent(<=n) ::=
      //   s-space{m} <where_m_<=_n>
      s_indent_le(n) {
        // debug_rule("s_indent_le",n)
        return this.all(this.rgx(re_s_indent), this.le(this.len(this.match), n));
      }

      s_separate_in_line() {
        // debug_rule("s_separate_in_line")
        return this.any(this.rgx(RegExp(`${s_separate_spaces}`, "yu")), this.start_of_line);
      }

      // [067]
      // s-line-prefix(n,c) ::=
      //   ( c = block-out => s-block-line-prefix(n) )
      //   ( c = block-in => s-block-line-prefix(n) )
      //   ( c = flow-out => s-flow-line-prefix(n) )
      //   ( c = flow-in => s-flow-line-prefix(n) )
      s_line_prefix(n, c) {
        // debug_rule("s_line_prefix",n,c)
        return this.case(c, {
          'block-in': this.rgx(re_s_indent_n(n)),
          'block-out': this.rgx(re_s_indent_n(n)),
          'flow-in': [this.s_flow_line_prefix, n],
          'flow-out': [this.s_flow_line_prefix, n]
        });
      }

      // [069]
      // s-flow-line-prefix(n) ::=
      //   s-indent(n)
      //   s-separate-in-line?
      s_flow_line_prefix(n) {
        // debug_rule("s_flow_line_prefix",n)
        return this.all(this.rgx(re_s_indent_n(n)), this.rep(0, 1, this.s_separate_in_line));
      }

      // [070]
      // l-empty(n,c) ::=
      //   ( s-line-prefix(n,c) | s-indent(<n) )
      //   b-as-line-feed
      l_empty(n, c) {
        // debug_rule("l_empty",n,c)
        return this.all(this.any([this.s_line_prefix, n, c], [this.s_indent_lt, n]), this.b_as_line_feed);
      }

      // [071]
      // b-l-trimmed(n,c) ::=
      //   b-non-content l-empty(n,c)+
      b_l_trimmed(n, c) {
        // debug_rule("b_l_trimmed",n,c)
        return this.all(this.rgx(re_line_break), this.rep(1, null, [this.l_empty, n, c]));
      }

      // [073]
      // b-l-folded(n,c) ::=
      //   b-l-trimmed(n,c) | b-as-space
      b_l_folded(n, c) {
        // debug_rule("b_l_folded",n,c)
        return this.any([this.b_l_trimmed, n, c], this.rgx(re_line_break));
      }

      // [074]
      // s-flow-folded(n) ::=
      //   s-separate-in-line?
      //   b-l-folded(n,flow-in)
      //   s-flow-line-prefix(n)
      s_flow_folded(n) {
        // debug_rule("s_flow_folded",n)
        return this.all(this.rep(0, 1, this.s_separate_in_line), [this.b_l_folded, n, "flow-in"], [this.s_flow_line_prefix, n]);
      }

      // [077]
      // s-b-comment ::=
      //   ( s-separate-in-line
      //   c-nb-comment-text? )?
      //   b-comment
      s_b_comment() {
        // debug_rule("s_b_comment")
        return this.all(this.rep(0, 1, this.all(this.s_separate_in_line, this.rgx2(RegExp(`${c_nb_comment_text}?`, "yu")))), this.rgx2(re_b_comment));
      }

      // [078]
      // l-comment ::=
      //   s-separate-in-line c-nb-comment-text?
      //   b-comment
      l_comment() {
        // debug_rule("l_comment")
        return this.all(this.s_separate_in_line, this.rgx(RegExp(`${c_nb_comment_text}*${b_comment}`, "yu")));
      }

      // [079]
      // s-l-comments ::=
      //   ( s-b-comment | <start_of_line> )
      //   l-comment*
      s_l_comments() {
        // debug_rule("s_l_comments")
        return this.all(this.any(this.s_b_comment, this.start_of_line), this.rep(0, null, this.l_comment));
      }

      // [080]
      // s-separate(n,c) ::=
      //   ( c = block-out => s-separate-lines(n) )
      //   ( c = block-in => s-separate-lines(n) )
      //   ( c = flow-out => s-separate-lines(n) )
      //   ( c = flow-in => s-separate-lines(n) )
      //   ( c = block-key => s-separate-in-line )
      //   ( c = flow-key => s-separate-in-line )
      s_separate(n, c) {
        // debug_rule("s_separate",n,c)
        return this.case(c, {
          'block-in': [this.s_separate_lines, n],
          'block-key': this.s_separate_in_line,
          'block-out': [this.s_separate_lines, n],
          'flow-in': [this.s_separate_lines, n],
          'flow-key': this.s_separate_in_line,
          'flow-out': [this.s_separate_lines, n]
        });
      }

      // [081]
      // s-separate-lines(n) ::=
      //   ( s-l-comments
      //   s-flow-line-prefix(n) )
      //   | s-separate-in-line
      s_separate_lines(n) {
        // debug_rule("s_separate_lines",n)
        return this.any(this.all(this.s_l_comments, [this.s_flow_line_prefix, n]), this.s_separate_in_line);
      }

      // [082]
      // l-directive ::=
      //   '%'
      //   ( ns-yaml-directive
      //   | ns-tag-directive
      //   | ns-reserved-directive )
      //   s-l-comments
      l_directive() {
        // debug_rule("l_directive")
        return this.all(this.chr('%'), this.any(this.ns_yaml_directive, this.ns_tag_directive, this.rgx(re_ns_reserved_directive)), this.s_l_comments);
      }

      ns_yaml_version() {
        // debug_rule("ns_yaml_version")
        return this.rgx(re_ns_yaml_version);
      }

      ns_yaml_directive() {
        // debug_rule("ns_yaml_directive")
        return this.all(this.rgx(re_ns_yaml_directive), this.ns_yaml_version);
      }

      // [088]
      // ns-tag-directive ::=
      //   'T' 'A' 'G'
      //   s-separate-in-line c-tag-handle
      //   s-separate-in-line ns-tag-prefix
      ns_tag_directive() {
        // debug_rule("ns_tag_directive")
        return this.all(this.rgx(RegExp(`TAG${s_separate_spaces}`, "yu")), this.c_tag_handle, this.s_separate_in_line, this.ns_tag_prefix);
      }

      c_tag_handle() {
        // debug_rule("c_tag_handle")
        return this.rgx(re_c_tag_handle);
      }

      ns_tag_prefix() {
        // debug_rule("ns_tag_prefix")
        return this.rgx(re_ns_tag_prefix);
      }

      // [096]
      // c-ns-properties(n,c) ::=
      //   ( c-ns-tag-property
      //   ( s-separate(n,c) c-ns-anchor-property )? )
      //   | ( c-ns-anchor-property
      //   ( s-separate(n,c) c-ns-tag-property )? )
      c_ns_properties(n, c) {
        // debug_rule("c_ns_properties",n,c)
        return this.any(this.all(this.c_ns_tag_property, this.rep(0, 1, this.all([this.s_separate, n, c], this.c_ns_anchor_property))), this.all(this.c_ns_anchor_property, this.rep(0, 1, this.all([this.s_separate, n, c], this.c_ns_tag_property))));
      }

      // [097]
      // c-ns-tag-property ::=
      //   c-verbatim-tag
      //   | c-ns-shorthand-tag
      //   | c-non-specific-tag
      c_ns_tag_property() {
        // debug_rule("c_ns_tag_property")
        return this.rgx(RegExp(`(?:(!<${ns_uri_char}+>)|(${c_tag_handle}${ns_tag_char}+)|!)`, "yu"));
      }

      c_ns_anchor_property() {
        // debug_rule("c_ns_anchor_property")
        return this.rgx(re_c_ns_anchor_property);
      }

      c_ns_alias_node() {
        // debug_rule("c_ns_alias_node")
        return this.rgx(re_c_ns_alias_node);
      }

      // [105]
      // e-scalar ::=
      //   <empty>
      e_scalar() {
        // debug_rule("e_scalar")
        return this.empty;
      }

      // [106]
      // e-node ::=
      //   e-scalar
      e_node() {
        // debug_rule("e_node")
        return this.e_scalar;
      }

      // [109]
      // c-double-quoted(n,c) ::=
      //   '"' nb-double-text(n,c)
      //   '"'
      c_double_quoted(n, c) {
        // debug_rule("c_double_quoted",n,c)
        return this.all(this.chr('"'), [this.nb_double_text, n, c], this.chr('"'));
      }

      // [110]
      // nb-double-text(n,c) ::=
      //   ( c = flow-out => nb-double-multi-line(n) )
      //   ( c = flow-in => nb-double-multi-line(n) )
      //   ( c = block-key => nb-double-one-line )
      //   ( c = flow-key => nb-double-one-line )
      nb_double_text(n, c) {
        // debug_rule("nb_double_text",n,c)
        return this.case(c, {
          'block-key': this.rgx(re_nb_double_one_line),
          'flow-in': [this.nb_double_multi_line, n],
          'flow-key': this.rgx(re_nb_double_one_line),
          'flow-out': [this.nb_double_multi_line, n]
        });
      }

      // [112]
      // s-double-escaped(n) ::=
      //   s-white* '\'
      //   b-non-content
      //   l-empty(n,flow-in)* s-flow-line-prefix(n)
      s_double_escaped(n) {
        // debug_rule("s_double_escaped",n)
        return this.all(this.rep(0, null, this.s_white), this.chr("\\"), this.rgx(re_line_break), this.rep2(0, null, [this.l_empty, n, "flow-in"]), [this.s_flow_line_prefix, n]);
      }

      // [113]
      // s-double-break(n) ::=
      //   s-double-escaped(n) | s-flow-folded(n)
      s_double_break(n) {
        // debug_rule("s_double_break",n)
        return this.any([this.s_double_escaped, n], [this.s_flow_folded, n]);
      }

      // [115]
      // s-double-next-line(n) ::=
      //   s-double-break(n)
      //   ( ns-double-char nb-ns-double-in-line
      //   ( s-double-next-line(n) | s-white* ) )?
      s_double_next_line(n) {
        // debug_rule("s_double_next_line",n)
        return this.all([this.s_double_break, n], this.rep(0, 1, this.all(this.rgx(re_ns_double_char), this.rgx(re_nb_ns_double_in_line), this.any([this.s_double_next_line, n], this.rep(0, null, this.s_white)))));
      }

      // [116]
      // nb-double-multi-line(n) ::=
      //   nb-ns-double-in-line
      //   ( s-double-next-line(n) | s-white* )
      nb_double_multi_line(n) {
        // debug_rule("nb_double_multi_line",n)
        return this.all(this.rgx(re_nb_ns_double_in_line), this.any([this.s_double_next_line, n], this.rep(0, null, this.s_white)));
      }

      // [120]
      // c-single-quoted(n,c) ::=
      //   ''' nb-single-text(n,c)
      //   '''
      c_single_quoted(n, c) {
        // debug_rule("c_single_quoted",n,c)
        return this.all(this.chr("'"), [this.nb_single_text, n, c], this.chr("'"));
      }

      // [121]
      // nb-single-text(n,c) ::=
      //   ( c = flow-out => nb-single-multi-line(n) )
      //   ( c = flow-in => nb-single-multi-line(n) )
      //   ( c = block-key => nb-single-one-line )
      //   ( c = flow-key => nb-single-one-line )
      nb_single_text(n, c) {
        // debug_rule("nb_single_text",n,c)
        return this.case(c, {
          'block-key': this.rgx(re_nb_single_one_line),
          'flow-in': [this.nb_single_multi_line, n],
          'flow-key': this.rgx(re_nb_single_one_line),
          'flow-out': [this.nb_single_multi_line, n]
        });
      }

      // [124]
      // s-single-next-line(n) ::=
      //   s-flow-folded(n)
      //   ( ns-single-char nb-ns-single-in-line
      //   ( s-single-next-line(n) | s-white* ) )?
      s_single_next_line(n) {
        // debug_rule("s_single_next_line",n)
        return this.all([this.s_flow_folded, n], this.rep(0, 1, this.all(this.rgx(RegExp(`${ns_single_char}${nb_ns_single_in_line}`, "yu")), this.any([this.s_single_next_line, n], this.rep(0, null, this.s_white)))));
      }

      // [125]
      // nb-single-multi-line(n) ::=
      //   nb-ns-single-in-line
      //   ( s-single-next-line(n) | s-white* )
      nb_single_multi_line(n) {
        // debug_rule("nb_single_multi_line",n)
        return this.all(this.rgx(re_nb_ns_single_in_line), this.any([this.s_single_next_line, n], this.rep(0, null, this.s_white)));
      }

      // [126]
      // ns-plain-first(c) ::=
      //   ( ns-char - c-indicator )
      //   | ( ( '?' | ':' | '-' )
      //   <followed_by_an_ns-plain-safe(c)> )
      ns_plain_first(c) {
        // debug_rule("ns_plain_first",c)
        return this.any(this.rgx(RegExp(`(?!${c_indicator})${ns_char}`, "yu")), this.all(this.rgx(/[?:-]/yu), this.chk('=', [this.ns_plain_safe, c])));
      }

      // [127]
      // ns-plain-safe(c) ::=
      //   ( c = flow-out => ns-plain-safe-out )
      //   ( c = flow-in => ns-plain-safe-in )
      //   ( c = block-key => ns-plain-safe-out )
      //   ( c = flow-key => ns-plain-safe-in )
      ns_plain_safe(c) {
        // debug_rule("ns_plain_safe",c)
        return this.case(c, {
          'block-key': this.ns_char,
          'flow-in': this.rgx(re_ns_plain_safe_in),
          'flow-key': this.rgx(re_ns_plain_safe_in),
          'flow-out': this.ns_char
        });
      }

      // [130]
      // ns-plain-char(c) ::=
      //   ( ns-plain-safe(c) - ':' - '#' )
      //   | ( <an_ns-char_preceding> '#' )
      //   | ( ':' <followed_by_an_ns-plain-safe(c)> )
      ns_plain_char(c) {
        // debug_rule("ns_plain_char",c)
        return this.any(this.but([this.ns_plain_safe, c], this.chr(':'), this.chr('#')), this.all(this.chk('<=', this.ns_char), this.chr('#')), this.all(this.chr(':'), this.chk('=', [this.ns_plain_safe, c])));
      }

      // [131]
      // ns-plain(n,c) ::=
      //   ( c = flow-out => ns-plain-multi-line(n,c) )
      //   ( c = flow-in => ns-plain-multi-line(n,c) )
      //   ( c = block-key => ns-plain-one-line(c) )
      //   ( c = flow-key => ns-plain-one-line(c) )
      ns_plain(n, c) {
        // debug_rule("ns_plain",n,c)
        return this.case(c, {
          'block-key': [this.ns_plain_one_line, c],
          'flow-in': [this.ns_plain_multi_line, n, c],
          'flow-key': [this.ns_plain_one_line, c],
          'flow-out': [this.ns_plain_multi_line, n, c]
        });
      }

      // [132]
      // nb-ns-plain-in-line(c) ::=
      //   ( s-white*
      //   ns-plain-char(c) )*
      nb_ns_plain_in_line(c) {
        // debug_rule("nb_ns_plain_in_line",c)
        return this.rep(0, null, this.all(this.rep(0, null, this.s_white), [this.ns_plain_char, c]));
      }

      // [133]
      // ns-plain-one-line(c) ::=
      //   ns-plain-first(c)
      //   nb-ns-plain-in-line(c)
      ns_plain_one_line(c) {
        // debug_rule("ns_plain_one_line",c)
        return this.all([this.ns_plain_first, c], [this.nb_ns_plain_in_line, c]);
      }

      // [134]
      // s-ns-plain-next-line(n,c) ::=
      //   s-flow-folded(n)
      //   ns-plain-char(c) nb-ns-plain-in-line(c)
      s_ns_plain_next_line(n, c) {
        // debug_rule("s_ns_plain_next_line",n,c)
        return this.all([this.s_flow_folded, n], [this.ns_plain_char, c], [this.nb_ns_plain_in_line, c]);
      }

      // [135]
      // ns-plain-multi-line(n,c) ::=
      //   ns-plain-one-line(c)
      //   s-ns-plain-next-line(n,c)*
      ns_plain_multi_line(n, c) {
        // debug_rule("ns_plain_multi_line",n,c)
        return this.all([this.ns_plain_one_line, c], this.rep(0, null, [this.s_ns_plain_next_line, n, c]));
      }

      // [136]
      // in-flow(c) ::=
      //   ( c = flow-out => flow-in )
      //   ( c = flow-in => flow-in )
      //   ( c = block-key => flow-key )
      //   ( c = flow-key => flow-key )
      in_flow(c) {
        // debug_rule("in_flow",c)
        return this.flip(c, {
          'block-key': "flow-key",
          'flow-in': "flow-in",
          'flow-key': "flow-key",
          'flow-out': "flow-in"
        });
      }

      // [137]
      // c-flow-sequence(n,c) ::=
      //   '[' s-separate(n,c)?
      //   ns-s-flow-seq-entries(n,in-flow(c))? ']'
      c_flow_sequence(n, c) {
        // debug_rule("c_flow_sequence",n,c)
        return this.all(this.chr('['), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_seq_entries, n, [this.in_flow, c]]), this.chr(']'));
      }

      // [138]
      // ns-s-flow-seq-entries(n,c) ::=
      //   ns-flow-seq-entry(n,c)
      //   s-separate(n,c)?
      //   ( ',' s-separate(n,c)?
      //   ns-s-flow-seq-entries(n,c)? )?
      ns_s_flow_seq_entries(n, c) {
        // debug_rule("ns_s_flow_seq_entries",n,c)
        return this.all([this.ns_flow_seq_entry, n, c], this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_seq_entries, n, c]))));
      }

      // [139]
      // ns-flow-seq-entry(n,c) ::=
      //   ns-flow-pair(n,c) | ns-flow-node(n,c)
      ns_flow_seq_entry(n, c) {
        // debug_rule("ns_flow_seq_entry",n,c)
        return this.any([this.ns_flow_pair, n, c], [this.ns_flow_node, n, c]);
      }

      // [140]
      // c-flow-mapping(n,c) ::=
      //   '{' s-separate(n,c)?
      //   ns-s-flow-map-entries(n,in-flow(c))? '}'
      c_flow_mapping(n, c) {
        // debug_rule("c_flow_mapping",n,c)
        return this.all(this.chr('{'), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_map_entries, n, [this.in_flow, c]]), this.chr('}'));
      }

      // [141]
      // ns-s-flow-map-entries(n,c) ::=
      //   ns-flow-map-entry(n,c)
      //   s-separate(n,c)?
      //   ( ',' s-separate(n,c)?
      //   ns-s-flow-map-entries(n,c)? )?
      ns_s_flow_map_entries(n, c) {
        // debug_rule("ns_s_flow_map_entries",n,c)
        return this.all([this.ns_flow_map_entry, n, c], this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, this.all(this.chr(','), this.rep(0, 1, [this.s_separate, n, c]), this.rep2(0, 1, [this.ns_s_flow_map_entries, n, c]))));
      }

      ns_flow_map_entry(n, c) {
        // debug_rule("ns_flow_map_entry",n,c)
        return this.any(this.all(this.rgx(re_ns_flow_map_entry), [this.s_separate, n, c], [this.ns_flow_map_explicit_entry, n, c]), [this.ns_flow_map_implicit_entry, n, c]);
      }

      // [143]
      // ns-flow-map-explicit-entry(n,c) ::=
      //   ns-flow-map-implicit-entry(n,c)
      //   | ( e-node
      //   e-node )
      ns_flow_map_explicit_entry(n, c) {
        // debug_rule("ns_flow_map_explicit_entry",n,c)
        return this.any([this.ns_flow_map_implicit_entry, n, c], this.all(this.e_node, this.e_node));
      }

      // [144]
      // ns-flow-map-implicit-entry(n,c) ::=
      //   ns-flow-map-yaml-key-entry(n,c)
      //   | c-ns-flow-map-empty-key-entry(n,c)
      //   | c-ns-flow-map-json-key-entry(n,c)
      ns_flow_map_implicit_entry(n, c) {
        // debug_rule("ns_flow_map_implicit_entry",n,c)
        return this.any([this.ns_flow_map_yaml_key_entry, n, c], [this.c_ns_flow_map_empty_key_entry, n, c], [this.c_ns_flow_map_json_key_entry, n, c]);
      }

      // [145]
      // ns-flow-map-yaml-key-entry(n,c) ::=
      //   ns-flow-yaml-node(n,c)
      //   ( ( s-separate(n,c)?
      //   c-ns-flow-map-separate-value(n,c) )
      //   | e-node )
      ns_flow_map_yaml_key_entry(n, c) {
        // debug_rule("ns_flow_map_yaml_key_entry",n,c)
        return this.all([this.ns_flow_yaml_node, n, c], this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.c_ns_flow_map_separate_value, n, c]), this.e_node));
      }

      // [146]
      // c-ns-flow-map-empty-key-entry(n,c) ::=
      //   e-node
      //   c-ns-flow-map-separate-value(n,c)
      c_ns_flow_map_empty_key_entry(n, c) {
        // debug_rule("c_ns_flow_map_empty_key_entry",n,c)
        return this.all(this.e_node, [this.c_ns_flow_map_separate_value, n, c]);
      }

      // [147]
      // c-ns-flow-map-separate-value(n,c) ::=
      //   ':' <not_followed_by_an_ns-plain-safe(c)>
      //   ( ( s-separate(n,c) ns-flow-node(n,c) )
      //   | e-node )
      c_ns_flow_map_separate_value(n, c) {
        // debug_rule("c_ns_flow_map_separate_value",n,c)
        return this.all(this.chr(':'), this.chk('!', [this.ns_plain_safe, c]), this.any(this.all([this.s_separate, n, c], [this.ns_flow_node, n, c]), this.e_node));
      }

      // [148]
      // c-ns-flow-map-json-key-entry(n,c) ::=
      //   c-flow-json-node(n,c)
      //   ( ( s-separate(n,c)?
      //   c-ns-flow-map-adjacent-value(n,c) )
      //   | e-node )
      c_ns_flow_map_json_key_entry(n, c) {
        // debug_rule("c_ns_flow_map_json_key_entry",n,c)
        return this.all([this.c_flow_json_node, n, c], this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.c_ns_flow_map_adjacent_value, n, c]), this.e_node));
      }

      // [149]
      // c-ns-flow-map-adjacent-value(n,c) ::=
      //   ':' ( (
      //   s-separate(n,c)?
      //   ns-flow-node(n,c) )
      //   | e-node )
      c_ns_flow_map_adjacent_value(n, c) {
        // debug_rule("c_ns_flow_map_adjacent_value",n,c)
        return this.all(this.chr(':'), this.any(this.all(this.rep(0, 1, [this.s_separate, n, c]), [this.ns_flow_node, n, c]), this.e_node));
      }

      ns_flow_pair(n, c) {
        // debug_rule("ns_flow_pair",n,c)
        return this.any(this.all(this.rgx(re_ns_flow_pair), [this.s_separate, n, c], [this.ns_flow_map_explicit_entry, n, c]), [this.ns_flow_pair_entry, n, c]);
      }

      // [151]
      // ns-flow-pair-entry(n,c) ::=
      //   ns-flow-pair-yaml-key-entry(n,c)
      //   | c-ns-flow-map-empty-key-entry(n,c)
      //   | c-ns-flow-pair-json-key-entry(n,c)
      ns_flow_pair_entry(n, c) {
        // debug_rule("ns_flow_pair_entry",n,c)
        return this.any([this.ns_flow_pair_yaml_key_entry, n, c], [this.c_ns_flow_map_empty_key_entry, n, c], [this.c_ns_flow_pair_json_key_entry, n, c]);
      }

      // [152]
      // ns-flow-pair-yaml-key-entry(n,c) ::=
      //   ns-s-implicit-yaml-key(flow-key)
      //   c-ns-flow-map-separate-value(n,c)
      ns_flow_pair_yaml_key_entry(n, c) {
        // debug_rule("ns_flow_pair_yaml_key_entry",n,c)
        return this.all([this.ns_s_implicit_yaml_key, "flow-key"], [this.c_ns_flow_map_separate_value, n, c]);
      }

      // [153]
      // c-ns-flow-pair-json-key-entry(n,c) ::=
      //   c-s-implicit-json-key(flow-key)
      //   c-ns-flow-map-adjacent-value(n,c)
      c_ns_flow_pair_json_key_entry(n, c) {
        // debug_rule("c_ns_flow_pair_json_key_entry",n,c)
        return this.all([this.c_s_implicit_json_key, "flow-key"], [this.c_ns_flow_map_adjacent_value, n, c]);
      }

      // [154]
      // ns-s-implicit-yaml-key(c) ::=
      //   ns-flow-yaml-node(n/a,c)
      //   s-separate-in-line?
      //   <at_most_1024_characters_altogether>
      ns_s_implicit_yaml_key(c) {
        // debug_rule("ns_s_implicit_yaml_key",c)
        return this.all(this.max(1024), [this.ns_flow_yaml_node, null, c], this.rep(0, 1, this.s_separate_in_line));
      }

      // [155]
      // c-s-implicit-json-key(c) ::=
      //   c-flow-json-node(n/a,c)
      //   s-separate-in-line?
      //   <at_most_1024_characters_altogether>
      c_s_implicit_json_key(c) {
        // debug_rule("c_s_implicit_json_key",c)
        return this.all(this.max(1024), [this.c_flow_json_node, null, c], this.rep(0, 1, this.s_separate_in_line));
      }

      // [156]
      // ns-flow-yaml-content(n,c) ::=
      //   ns-plain(n,c)
      ns_flow_yaml_content(n, c) {
        // debug_rule("ns_flow_yaml_content",n,c)
        return [this.ns_plain, n, c];
      }

      // [157]
      // c-flow-json-content(n,c) ::=
      //   c-flow-sequence(n,c) | c-flow-mapping(n,c)
      //   | c-single-quoted(n,c) | c-double-quoted(n,c)
      c_flow_json_content(n, c) {
        // debug_rule("c_flow_json_content",n,c)
        return this.any([this.c_flow_sequence, n, c], [this.c_flow_mapping, n, c], [this.c_single_quoted, n, c], [this.c_double_quoted, n, c]);
      }

      // [158]
      // ns-flow-content(n,c) ::=
      //   ns-flow-yaml-content(n,c) | c-flow-json-content(n,c)
      ns_flow_content(n, c) {
        // debug_rule("ns_flow_content",n,c)
        return this.any([this.ns_flow_yaml_content, n, c], [this.c_flow_json_content, n, c]);
      }

      // [159]
      // ns-flow-yaml-node(n,c) ::=
      //   c-ns-alias-node
      //   | ns-flow-yaml-content(n,c)
      //   | ( c-ns-properties(n,c)
      //   ( ( s-separate(n,c)
      //   ns-flow-yaml-content(n,c) )
      //   | e-scalar ) )
      ns_flow_yaml_node(n, c) {
        // debug_rule("ns_flow_yaml_node",n,c)
        return this.any(this.c_ns_alias_node, [this.ns_flow_yaml_content, n, c], this.all([this.c_ns_properties, n, c], this.any(this.all([this.s_separate, n, c], [this.ns_flow_content, n, c]), this.e_scalar)));
      }

      // [160]
      // c-flow-json-node(n,c) ::=
      //   ( c-ns-properties(n,c)
      //   s-separate(n,c) )?
      //   c-flow-json-content(n,c)
      c_flow_json_node(n, c) {
        // debug_rule("c_flow_json_node",n,c)
        return this.all(this.rep(0, 1, this.all([this.c_ns_properties, n, c], [this.s_separate, n, c])), [this.c_flow_json_content, n, c]);
      }

      // [161]
      // ns-flow-node(n,c) ::=
      //   c-ns-alias-node
      //   | ns-flow-content(n,c)
      //   | ( c-ns-properties(n,c)
      //   ( ( s-separate(n,c)
      //   ns-flow-content(n,c) )
      //   | e-scalar ) )
      ns_flow_node(n, c) {
        // debug_rule("ns_flow_node",n,c)
        return this.any(this.c_ns_alias_node, [this.ns_flow_content, n, c], this.all([this.c_ns_properties, n, c], this.any(this.all([this.s_separate, n, c], [this.ns_flow_content, n, c]), this.e_scalar)));
      }

      // [162]
      // c-b-block-header(m,t) ::=
      //   ( ( c-indentation-indicator(m)
      //   c-chomping-indicator(t) )
      //   | ( c-chomping-indicator(t)
      //   c-indentation-indicator(m) ) )
      //   s-b-comment
      c_b_block_header(n) {
        // debug_rule("c_b_block_header",n)
        return this.all(this.any(this.all([this.c_indentation_indicator, n], this.c_chomping_indicator, this.chk('=', this.any(this.end_of_stream, this.s_white, this.rgx(re_line_break)))), this.all(this.c_chomping_indicator, [this.c_indentation_indicator, n], this.chk('=', this.any(this.end_of_stream, this.s_white, this.rgx(re_line_break))))), this.s_b_comment);
      }

      // [163]
      // c-indentation-indicator(m) ::=
      //   ( ns-dec-digit => m = ns-dec-digit - x:30 )
      //   ( <empty> => m = auto-detect() )
      c_indentation_indicator(n) {
        // debug_rule("c_indentation_indicator",n)
        return this.any(this.if(this.rng("\u{31}", "\u{39}"), this.set('m', this.ord(this.match))), this.if(this.empty, this.set('m', [this.auto_detect, n])));
      }

      // [164]
      // c-chomping-indicator(t) ::=
      //   ( '-' => t = strip )
      //   ( '+' => t = keep )
      //   ( <empty> => t = clip )
      c_chomping_indicator() {
        // debug_rule("c_chomping_indicator")
        return this.any(this.if(this.chr('-'), this.set('t', "strip")), this.if(this.chr('+'), this.set('t', "keep")), this.if(this.empty, this.set('t', "clip")));
      }

      // [165]
      // b-chomped-last(t) ::=
      //   ( t = strip => b-non-content | <end_of_file> )
      //   ( t = clip => b-as-line-feed | <end_of_file> )
      //   ( t = keep => b-as-line-feed | <end_of_file> )
      b_chomped_last(t) {
        // debug_rule("b_chomped_last",t)
        return this.case(t, {
          'clip': this.any(this.b_as_line_feed, this.end_of_stream),
          'keep': this.any(this.b_as_line_feed, this.end_of_stream),
          'strip': this.any(this.rgx(re_line_break), this.end_of_stream)
        });
      }

      // [166]
      // l-chomped-empty(n,t) ::=
      //   ( t = strip => l-strip-empty(n) )
      //   ( t = clip => l-strip-empty(n) )
      //   ( t = keep => l-keep-empty(n) )
      l_chomped_empty(n, t) {
        // debug_rule("l_chomped_empty",n,t)
        return this.case(t, {
          'clip': [this.l_strip_empty, n],
          'keep': [this.l_keep_empty, n],
          'strip': [this.l_strip_empty, n]
        });
      }

      // [167]
      // l-strip-empty(n) ::=
      //   ( s-indent(<=n) b-non-content )*
      //   l-trail-comments(n)?
      l_strip_empty(n) {
        // debug_rule("l_strip_empty",n)
        return this.all(this.rep(0, null, this.all([this.s_indent_le, n], this.rgx(re_line_break))), this.rep2(0, 1, [this.l_trail_comments, n]));
      }

      // [168]
      // l-keep-empty(n) ::=
      //   l-empty(n,block-in)*
      //   l-trail-comments(n)?
      l_keep_empty(n) {
        // debug_rule("l_keep_empty",n)
        return this.all(this.rep(0, null, [this.l_empty, n, "block-in"]), this.rep2(0, 1, [this.l_trail_comments, n]));
      }

      // [169]
      // l-trail-comments(n) ::=
      //   s-indent(<n)
      //   c-nb-comment-text b-comment
      //   l-comment*
      l_trail_comments(n) {
        // debug_rule("l_trail_comments",n)
        return this.all([this.s_indent_lt, n], this.rgx(RegExp(`${c_nb_comment_text}${b_comment}`, "yu")), this.rep(0, null, this.l_comment));
      }

      // [170]
      // c-l+literal(n) ::=
      //   '|' c-b-block-header(m,t)
      //   l-literal-content(n+m,t)
      c_l_literal(n) {
        // debug_rule("c_l_literal",n)
        return this.all(this.chr('|'), [this.c_b_block_header, n], [this.l_literal_content, this.add(n, this.m()), this.t()]);
      }

      // [171]
      // l-nb-literal-text(n) ::=
      //   l-empty(n,block-in)*
      //   s-indent(n) nb-char+
      l_nb_literal_text(n) {
        // debug_rule("l_nb_literal_text",n)
        return this.all(this.rep(0, null, [this.l_empty, n, "block-in"]), this.rgx(re_s_indent_n(n)), this.rep2(1, null, this.nb_char));
      }

      // [172]
      // b-nb-literal-next(n) ::=
      //   b-as-line-feed
      //   l-nb-literal-text(n)
      b_nb_literal_next(n) {
        // debug_rule("b_nb_literal_next",n)
        return this.all(this.b_as_line_feed, [this.l_nb_literal_text, n]);
      }

      // [173]
      // l-literal-content(n,t) ::=
      //   ( l-nb-literal-text(n)
      //   b-nb-literal-next(n)*
      //   b-chomped-last(t) )?
      //   l-chomped-empty(n,t)
      l_literal_content(n, t) {
        // debug_rule("l_literal_content",n,t)
        return this.all(this.rep(0, 1, this.all([this.l_nb_literal_text, n], this.rep(0, null, [this.b_nb_literal_next, n]), [this.b_chomped_last, t])), [this.l_chomped_empty, n, t]);
      }

      // [174]
      // c-l+folded(n) ::=
      //   '>' c-b-block-header(m,t)
      //   l-folded-content(n+m,t)
      c_l_folded(n) {
        // debug_rule("c_l_folded",n)
        return this.all(this.chr('>'), [this.c_b_block_header, n], [this.l_folded_content, this.add(n, this.m()), this.t()]);
      }

      // [175]
      // s-nb-folded-text(n) ::=
      //   s-indent(n) ns-char
      //   nb-char*
      s_nb_folded_text(n) {
        // debug_rule("s_nb_folded_text",n)
        return this.all(this.rgx(re_s_indent_n(n)), this.ns_char, this.rep(0, null, this.nb_char));
      }

      // [176]
      // l-nb-folded-lines(n) ::=
      //   s-nb-folded-text(n)
      //   ( b-l-folded(n,block-in) s-nb-folded-text(n) )*
      l_nb_folded_lines(n) {
        // debug_rule("l_nb_folded_lines",n)
        return this.all([this.s_nb_folded_text, n], this.rep(0, null, this.all([this.b_l_folded, n, "block-in"], [this.s_nb_folded_text, n])));
      }

      // [177]
      // s-nb-spaced-text(n) ::=
      //   s-indent(n) s-white
      //   nb-char*
      s_nb_spaced_text(n) {
        // debug_rule("s_nb_spaced_text",n)
        return this.all(this.rgx(re_s_indent_n(n)), this.s_white, this.rep(0, null, this.nb_char));
      }

      // [178]
      // b-l-spaced(n) ::=
      //   b-as-line-feed
      //   l-empty(n,block-in)*
      b_l_spaced(n) {
        // debug_rule("b_l_spaced",n)
        return this.all(this.b_as_line_feed, this.rep(0, null, [this.l_empty, n, "block-in"]));
      }

      // [179]
      // l-nb-spaced-lines(n) ::=
      //   s-nb-spaced-text(n)
      //   ( b-l-spaced(n) s-nb-spaced-text(n) )*
      l_nb_spaced_lines(n) {
        // debug_rule("l_nb_spaced_lines",n)
        return this.all([this.s_nb_spaced_text, n], this.rep(0, null, this.all([this.b_l_spaced, n], [this.s_nb_spaced_text, n])));
      }

      // [180]
      // l-nb-same-lines(n) ::=
      //   l-empty(n,block-in)*
      //   ( l-nb-folded-lines(n) | l-nb-spaced-lines(n) )
      l_nb_same_lines(n) {
        // debug_rule("l_nb_same_lines",n)
        return this.all(this.rep(0, null, [this.l_empty, n, "block-in"]), this.any([this.l_nb_folded_lines, n], [this.l_nb_spaced_lines, n]));
      }

      // [181]
      // l-nb-diff-lines(n) ::=
      //   l-nb-same-lines(n)
      //   ( b-as-line-feed l-nb-same-lines(n) )*
      l_nb_diff_lines(n) {
        // debug_rule("l_nb_diff_lines",n)
        return this.all([this.l_nb_same_lines, n], this.rep(0, null, this.all(this.b_as_line_feed, [this.l_nb_same_lines, n])));
      }

      // [182]
      // l-folded-content(n,t) ::=
      //   ( l-nb-diff-lines(n)
      //   b-chomped-last(t) )?
      //   l-chomped-empty(n,t)
      l_folded_content(n, t) {
        // debug_rule("l_folded_content",n,t)
        return this.all(this.rep(0, 1, this.all([this.l_nb_diff_lines, n], [this.b_chomped_last, t])), [this.l_chomped_empty, n, t]);
      }

      // [183]
      // l+block-sequence(n) ::=
      //   ( s-indent(n+m)
      //   c-l-block-seq-entry(n+m) )+
      //   <for_some_fixed_auto-detected_m_>_0>
      l_block_sequence(n) {
        var m;
        if (!(m = this.call([this.auto_detect_indent, n], 'number'))) {
          return false;
        }
        // debug_rule("l_block_sequence",n)
        return this.all(this.rep(1, null, this.all(this.rgx(re_s_indent_n(n + m)), [this.c_l_block_seq_entry, this.add(n, m)])));
      }

      // [184]
      // c-l-block-seq-entry(n) ::=
      //   '-' <not_followed_by_an_ns-char>
      //   s-l+block-indented(n,block-in)
      c_l_block_seq_entry(n) {
        // debug_rule("c_l_block_seq_entry",n)
        return this.all(this.chr('-'), this.chk('!', this.ns_char), [this.s_l_block_indented, n, "block-in"]);
      }

      // [185]
      // s-l+block-indented(n,c) ::=
      //   ( s-indent(m)
      //   ( ns-l-compact-sequence(n+1+m)
      //   | ns-l-compact-mapping(n+1+m) ) )
      //   | s-l+block-node(n,c)
      //   | ( e-node s-l-comments )
      s_l_block_indented(n, c) {
        var m;
        m = this.call([this.auto_detect_indent, n], 'number');
        // debug_rule("s_l_block_indented",n,c)
        return this.any(this.all(this.rgx(re_s_indent_n(m)), this.any([this.ns_l_compact_sequence, this.add(n, this.add(1, m))], [this.ns_l_compact_mapping, this.add(n, this.add(1, m))])), [this.s_l_block_node, n, c], this.all(this.e_node, this.s_l_comments));
      }

      // [186]
      // ns-l-compact-sequence(n) ::=
      //   c-l-block-seq-entry(n)
      //   ( s-indent(n) c-l-block-seq-entry(n) )*
      ns_l_compact_sequence(n) {
        // debug_rule("ns_l_compact_sequence",n)
        return this.all([this.c_l_block_seq_entry, n], this.rep(0, null, this.all(this.rgx(re_s_indent_n(n)), [this.c_l_block_seq_entry, n])));
      }

      // [187]
      // l+block-mapping(n) ::=
      //   ( s-indent(n+m)
      //   ns-l-block-map-entry(n+m) )+
      //   <for_some_fixed_auto-detected_m_>_0>
      l_block_mapping(n) {
        var m;
        if (!(m = this.call([this.auto_detect_indent, n], 'number'))) {
          return false;
        }
        // debug_rule("l_block_mapping",n)
        return this.all(this.rep(1, null, this.all(this.rgx(re_s_indent_n(n + m)), [this.ns_l_block_map_entry, this.add(n, m)])));
      }

      // [188]
      // ns-l-block-map-entry(n) ::=
      //   c-l-block-map-explicit-entry(n)
      //   | ns-l-block-map-implicit-entry(n)
      ns_l_block_map_entry(n) {
        // debug_rule("ns_l_block_map_entry",n)
        return this.any([this.c_l_block_map_explicit_entry, n], [this.ns_l_block_map_implicit_entry, n]);
      }

      // [189]
      // c-l-block-map-explicit-entry(n) ::=
      //   c-l-block-map-explicit-key(n)
      //   ( l-block-map-explicit-value(n)
      //   | e-node )
      c_l_block_map_explicit_entry(n) {
        // debug_rule("c_l_block_map_explicit_entry",n)
        return this.all([this.c_l_block_map_explicit_key, n], this.any([this.l_block_map_explicit_value, n], this.e_node));
      }

      // [190]
      // c-l-block-map-explicit-key(n) ::=
      //   '?'
      //   s-l+block-indented(n,block-out)
      c_l_block_map_explicit_key(n) {
        // debug_rule("c_l_block_map_explicit_key",n)
        return this.all(this.chr('?'), this.chk('=', this.any(this.end_of_stream, this.s_white, this.rgx(re_line_break))), [this.s_l_block_indented, n, "block-out"]);
      }

      // [191]
      // l-block-map-explicit-value(n) ::=
      //   s-indent(n)
      //   ':' s-l+block-indented(n,block-out)
      l_block_map_explicit_value(n) {
        // debug_rule("l_block_map_explicit_value",n)
        return this.all(this.rgx(re_s_indent_n(n)), this.chr(':'), [this.s_l_block_indented, n, "block-out"]);
      }

      // [192]
      // ns-l-block-map-implicit-entry(n) ::=
      //   (
      //   ns-s-block-map-implicit-key
      //   | e-node )
      //   c-l-block-map-implicit-value(n)
      ns_l_block_map_implicit_entry(n) {
        // debug_rule("ns_l_block_map_implicit_entry",n)
        return this.all(this.any(this.any([this.c_s_implicit_json_key, "block-key"], [this.ns_s_implicit_yaml_key, "block-key"]), this.e_node), [this.c_l_block_map_implicit_value, n]);
      }

      // [194]
      // c-l-block-map-implicit-value(n) ::=
      //   ':' (
      //   s-l+block-node(n,block-out)
      //   | ( e-node s-l-comments ) )
      c_l_block_map_implicit_value(n) {
        // debug_rule("c_l_block_map_implicit_value",n)
        return this.all(this.chr(':'), this.any([this.s_l_block_node, n, "block-out"], this.all(this.e_node, this.s_l_comments)));
      }

      // [195]
      // ns-l-compact-mapping(n) ::=
      //   ns-l-block-map-entry(n)
      //   ( s-indent(n) ns-l-block-map-entry(n) )*
      ns_l_compact_mapping(n) {
        // debug_rule("ns_l_compact_mapping",n)
        return this.all([this.ns_l_block_map_entry, n], this.rep(0, null, this.all(this.rgx(re_s_indent_n(n)), [this.ns_l_block_map_entry, n])));
      }

      // [196]
      // s-l+block-node(n,c) ::=
      //   s-l+block-in-block(n,c) | s-l+flow-in-block(n)
      s_l_block_node(n, c) {
        // debug_rule("s_l_block_node",n,c)
        return this.any([this.s_l_block_in_block, n, c], [this.s_l_flow_in_block, n]);
      }

      // [197]
      // s-l+flow-in-block(n) ::=
      //   s-separate(n+1,flow-out)
      //   ns-flow-node(n+1,flow-out) s-l-comments
      s_l_flow_in_block(n) {
        // debug_rule("s_l_flow_in_block",n)
        return this.all([this.s_separate, this.add(n, 1), "flow-out"], [this.ns_flow_node, this.add(n, 1), "flow-out"], this.s_l_comments);
      }

      // [198]
      // s-l+block-in-block(n,c) ::=
      //   s-l+block-scalar(n,c) | s-l+block-collection(n,c)
      s_l_block_in_block(n, c) {
        // debug_rule("s_l_block_in_block",n,c)
        return this.any([this.s_l_block_scalar, n, c], [this.s_l_block_collection, n, c]);
      }

      // [199]
      // s-l+block-scalar(n,c) ::=
      //   s-separate(n+1,c)
      //   ( c-ns-properties(n+1,c) s-separate(n+1,c) )?
      //   ( c-l+literal(n) | c-l+folded(n) )
      s_l_block_scalar(n, c) {
        // debug_rule("s_l_block_scalar",n,c)
        return this.all([this.s_separate, this.add(n, 1), c], this.rep(0, 1, this.all([this.c_ns_properties, this.add(n, 1), c], [this.s_separate, this.add(n, 1), c])), this.any([this.c_l_literal, n], [this.c_l_folded, n]));
      }

      // [200]
      // s-l+block-collection(n,c) ::=
      //   ( s-separate(n+1,c)
      //   c-ns-properties(n+1,c) )?
      //   s-l-comments
      //   ( l+block-sequence(seq-spaces(n,c))
      //   | l+block-mapping(n) )
      s_l_block_collection(n, c) {
        // debug_rule("s_l_block_collection",n,c)
        return this.all(this.rep(0, 1, this.all([this.s_separate, this.add(n, 1), c], this.any(this.all([this.c_ns_properties, this.add(n, 1), c], this.s_l_comments), this.all(this.c_ns_tag_property, this.s_l_comments), this.all(this.c_ns_anchor_property, this.s_l_comments)))), this.s_l_comments, this.any([this.l_block_sequence, [this.seq_spaces, n, c]], [this.l_block_mapping, n]));
      }

      // [201]
      // seq-spaces(n,c) ::=
      //   ( c = block-out => n-1 )
      //   ( c = block-in => n )
      seq_spaces(n, c) {
        // debug_rule("seq_spaces",n,c)
        return this.flip(c, {
          'block-in': n,
          'block-out': this.sub(n, 1)
        });
      }

      // [202]
      // l-document-prefix ::=
      //   c-byte-order-mark? l-comment*
      l_document_prefix() {
        // debug_rule("l_document_prefix")
        return this.all(this.rep(0, 1, this.chr(c_byte_order_mark)), this.rep2(0, null, this.l_comment));
      }

      c_directives_end() {
        // debug_rule("c_directives_end")
        return this.rgx(re_c_directives_end);
      }

      c_document_end() {
        // debug_rule("c_document_end")
        return this.rgx(re_c_document_end);
      }

      // [205]
      // l-document-suffix ::=
      //   c-document-end s-l-comments
      l_document_suffix() {
        // debug_rule("l_document_suffix")
        return this.all(this.c_document_end, this.s_l_comments);
      }

      c_forbidden() {
        // debug_rule("c_forbidden")
        return this.all(this.start_of_line, this.rgx(re_c_forbidden));
      }

      // [207]
      // l-bare-document ::=
      //   s-l+block-node(-1,block-in)
      //   <excluding_c-forbidden_content>
      l_bare_document() {
        // debug_rule("l_bare_document")
        return this.all(this.exclude(this.c_forbidden), [this.s_l_block_node, -1, "block-in"]);
      }

      // [208]
      // l-explicit-document ::=
      //   c-directives-end
      //   ( l-bare-document
      //   | ( e-node s-l-comments ) )
      l_explicit_document() {
        // debug_rule("l_explicit_document")
        return this.all(this.c_directives_end, this.any(this.l_bare_document, this.all(this.e_node, this.s_l_comments)));
      }

      // [209]
      // l-directive-document ::=
      //   l-directive+
      //   l-explicit-document
      l_directive_document() {
        // debug_rule("l_directive_document")
        return this.all(this.rep(1, null, this.l_directive), this.l_explicit_document);
      }

      // [210]
      // l-any-document ::=
      //   l-directive-document
      //   | l-explicit-document
      //   | l-bare-document
      l_any_document() {
        // debug_rule("l_any_document")
        return this.any(this.l_directive_document, this.l_explicit_document, this.l_bare_document);
      }

      // [211]
      // l-yaml-stream ::=
      //   l-document-prefix* l-any-document?
      //   ( ( l-document-suffix+ l-document-prefix*
      //   l-any-document? )
      //   | ( l-document-prefix* l-explicit-document? ) )*
      l_yaml_stream() {
        // debug_rule("l_yaml_stream")
        return this.all(this.l_document_prefix, this.rep(0, 1, this.l_any_document), this.rep2(0, null, this.any(this.all(this.l_document_suffix, this.rep(0, null, this.l_document_prefix), this.rep2(0, 1, this.l_any_document)), this.all(this.l_document_prefix, this.rep(0, 1, this.l_explicit_document)))));
      }

    };

    r2s = function(re) {
      if (!re instanceof RegExp) {
        throw `Not a regex ${re}`;
      }
      return String(re).slice(1, -3);
    };

    r2c = function(re) {
      if (!re instanceof RegExp) {
        throw `Not a regex ${re}`;
      }
      return String(re).slice(2, -4);
    };

    // [001]
    // c-printable ::=
    //   x:9 | x:A | x:D | [x:20-x:7E]
    //   | x:85 | [x:A0-x:D7FF] | [x:E000-x:FFFD]
    //   | [x:10000-x:10FFFF]
    c_printable = r2s(/[\u{09}\u{0A}\u{0D}\u{20}-\u{7E}\u{85}\u{A0}-\u{D7FF}\u{E000}-\u{FFFD}\u{10000}-\u{10FFFF}]/yu);

    // [002]
    // nb-json ::=
    //   x:9 | [x:20-x:10FFFF]
    nb_json = r2s(/[\u{09}\u{20}-\u{ffff}]/yu); // \u{20}-\u{10FFFF}

    // [003]
    // c-byte-order-mark ::=
    //   x:FEFF
    c_byte_order_mark = "\u{FEFF}";

    // [022]
    // c-indicator ::=
    //   '-' | '?' | ':' | ',' | '[' | ']' | '{' | '}'
    //   | '#' | '&' | '*' | '!' | '|' | '>' | ''' | '"'
    //   | '%' | '@' | '`'
    c_indicator = r2s(/[-?:,[\]{}&*!\u{23}|>'"%@`]/yu);

    // [023]
    // c-flow-indicator ::=
    //   ',' | '[' | ']' | '{' | '}'
    c_flow_indicator = r2s(/[,[\]{}]/yu);

    // [024]
    // b-line-feed ::=
    //   x:A
    b_line_feed = "\u{0A}";

    // [025]
    // b-carriage-return ::=
    //   x:D
    b_carriage_return = "\u{0D}";

    // [026]
    // b-char ::=
    //   b-line-feed | b-carriage-return
    re_b_char = /[\u{0A}\u{0D}]/yu;

    b_char = r2s(re_b_char);

    b_char_s = r2c(re_b_char);

    // [027]
    // nb-char ::=
    //   c-printable - b-char - c-byte-order-mark
    re_nb_char = RegExp(`(?:(?![${b_char_s}${c_byte_order_mark}])${c_printable})`, "yu");

    nb_char = r2s(re_nb_char);

    // [028]
    // b-break ::=
    //   ( b-carriage-return b-line-feed )
    //   | b-carriage-return
    //   | b-line-feed
    re_line_break = RegExp(`(?:${b_carriage_return}${b_line_feed}|${b_carriage_return}|${b_line_feed})`, "yu");

    line_break = r2s(re_line_break);

    // [031]
    // s-space ::=
    //   x:20
    s_space = "\u{20}";

    // [033]
    // s-white ::=
    //   s-space | s-tab
    re_s_white = RegExp(`[${s_space}\\t]`, "yu");

    s_white = r2s(re_s_white);

    // [034]
    // ns-char ::=
    //   nb-char - s-white
    re_ns_char = RegExp(`(?:(?!${s_white})${nb_char})`, "yu");

    ns_char = r2s(re_ns_char);

    // [035]
    // ns-dec-digit ::=
    //   [x:30-x:39]
    re_ns_dec_digit = /[0-9]/yu;

    ns_dec_digit = r2s(re_ns_dec_digit);

    ns_dec_digit_s = r2c(re_ns_dec_digit);

    // [036]
    // ns-hex-digit ::=
    //   ns-dec-digit
    //   | [x:41-x:46] | [x:61-x:66]
    ns_hex_digit = r2s(RegExp(`[${ns_dec_digit_s}A-Fa-f]`, "yu"));

    // [037]
    // ns-ascii-letter ::=
    //   [x:41-x:5A] | [x:61-x:7A]
    re_ns_ascii_letter = /[\u{41}-\u{5A}\u{61}-\u{7A}]/yu;

    ns_ascii_letter_s = r2c(re_ns_ascii_letter);

    // [038]
    // ns-word-char ::=
    //   ns-dec-digit | ns-ascii-letter | '-'
    re_ns_word_char = RegExp(`[\\-${ns_dec_digit_s}${ns_ascii_letter_s}]`, "yu");

    ns_word_char = r2s(re_ns_word_char);

    ns_word_char_s = r2c(re_ns_word_char);

    // [039]
    // ns-uri-char ::=
    //   '%' ns-hex-digit ns-hex-digit | ns-word-char | '#'
    //   | ';' | '/' | '?' | ':' | '@' | '&' | '=' | '+' | '$' | ','
    //   | '_' | '.' | '!' | '~' | '*' | ''' | '(' | ')' | '[' | ']'
    ns_uri_char = r2s(RegExp(`(?:%${ns_hex_digit}{2}|[${ns_word_char_s}\\u{23};/?:@&=+$,_.!~*'()[\\]])`, "yu"));

    // [040]
    // ns-tag-char ::=
    //   ns-uri-char - '!' - c-flow-indicator
    ns_tag_char = r2s(RegExp(`(?:(?!!|${c_flow_indicator})${ns_uri_char})`, "yu"));

    // [062]
    // c-ns-esc-char ::=
    //   '\'
    //   ( ns-esc-null | ns-esc-bell | ns-esc-backspace
    //   | ns-esc-horizontal-tab | ns-esc-line-feed
    //   | ns-esc-vertical-tab | ns-esc-form-feed
    //   | ns-esc-carriage-return | ns-esc-escape | ns-esc-space
    //   | ns-esc-double-quote | ns-esc-slash | ns-esc-backslash
    //   | ns-esc-next-line | ns-esc-non-breaking-space
    //   | ns-esc-line-separator | ns-esc-paragraph-separator
    //   | ns-esc-8-bit | ns-esc-16-bit | ns-esc-32-bit )
    c_ns_esc_char = r2s(RegExp(`\\\\(?:[0abt\\u{09}nvfre\\u{20}"/\\\\N_LP]|x${ns_hex_digit}{2}|u${ns_hex_digit}{4}|U${ns_hex_digit}{8})`, "yu"));

    // [063]
    re_s_indent = RegExp(`${s_space}*`, "yu");

    re_s_indent_n = function(n) {
      return RegExp(`${s_space}{${n}}`, "yu");
    };

    // [066]
    // s-separate-in-line ::=
    //   s-white+ | <start_of_line>
    s_separate_spaces = r2s(RegExp(`${s_white}+`, "yu"));

    // [075]
    // c-nb-comment-text ::=
    //   '#' nb-char*
    c_nb_comment_text = r2s(RegExp(`(?:\\u{23}${nb_char}*)`, "yu"));

    // [076]
    // b-comment ::=
    //   b-non-content | <end_of_file>
    re_b_comment = RegExp(`(?:${line_break}|$)`, "yu");

    b_comment = r2s(re_b_comment);

    // [084]
    // ns-directive-name ::=
    //   ns-char+
    ns_directive_name = r2s(RegExp(`${ns_char}+`, "yu"));

    // [085]
    // ns-directive-parameter ::=
    //   ns-char+
    ns_directive_parameter = r2s(RegExp(`${ns_char}+`, "yu"));

    // [083]
    // ns-reserved-directive ::=
    //   ns-directive-name
    //   ( s-separate-in-line ns-directive-parameter )*
    re_ns_reserved_directive = RegExp(`${ns_directive_name}(?:${s_separate_spaces}${ns_directive_parameter})*`, "yu");

    // [087]
    // ns-yaml-version ::=
    //   ns-dec-digit+ '.' ns-dec-digit+
    re_ns_yaml_version = RegExp(`${ns_dec_digit}+\\.${ns_dec_digit}+`, "yu");

    // [086]
    // ns-yaml-directive ::=
    //   'Y' 'A' 'M' 'L'
    //   s-separate-in-line ns-yaml-version
    re_ns_yaml_directive = RegExp(`(?:YAML${s_separate_spaces})`, "yu");

    // [090]
    // c-primary-tag-handle ::=
    //   '!'
    c_primary_tag_handle = r2s(/!/yu);

    // [091]
    // c-secondary-tag-handle ::=
    //   '!' '!'
    c_secondary_tag_handle = r2s(/!!/yu);

    // [092]
    // c-named-tag-handle ::=
    //   '!' ns-word-char+ '!'
    c_named_tag_handle = r2s(RegExp(`!${ns_word_char}+!`, "yu"));

    // [089]
    // c-tag-handle ::=
    //   c-named-tag-handle
    //   | c-secondary-tag-handle
    //   | c-primary-tag-handle
    re_c_tag_handle = RegExp(`(?:${c_named_tag_handle}|${c_secondary_tag_handle}|${c_primary_tag_handle})`, "yu");

    c_tag_handle = r2s(re_c_tag_handle);

    // [094]
    // c-ns-local-tag-prefix ::=
    //   '!' ns-uri-char*
    c_ns_local_tag_prefix = r2s(RegExp(`!${ns_uri_char}*`, "yu"));

    // [095]
    // ns-global-tag-prefix ::=
    //   ns-tag-char ns-uri-char*
    ns_global_tag_prefix = r2s(RegExp(`${ns_tag_char}${ns_uri_char}*`, "yu"));

    // [093]
    // ns-tag-prefix ::=
    //   c-ns-local-tag-prefix | ns-global-tag-prefix
    re_ns_tag_prefix = RegExp(`(?:${c_ns_local_tag_prefix}|${ns_global_tag_prefix})`, "yu");

    // [103]
    // ns-anchor-name ::=
    //   ns-anchor-char+
    ns_anchor_name = r2s(RegExp(`(?:(?!${c_flow_indicator})${ns_char})+`, "yu"));

    // [101]
    // c-ns-anchor-property ::=
    //   '&' ns-anchor-name
    re_c_ns_anchor_property = RegExp(`&${ns_anchor_name}`, "yu");

    // [104]
    // c-ns-alias-node ::=
    //   '*' ns-anchor-name
    re_c_ns_alias_node = RegExp(`\\*${ns_anchor_name}`, "yu");

    // [107]
    // nb-double-char ::=
    //   c-ns-esc-char | ( nb-json - '\' - '"' )
    nb_double_char = r2s(RegExp(`(?:${c_ns_esc_char}|(?![\\\\"])${nb_json})`, "yu"));

    // [108]
    // ns-double-char ::=
    //   nb-double-char - s-white
    re_ns_double_char = RegExp(`(?!${s_white})${nb_double_char}`, "yu");

    ns_double_char = r2s(re_ns_double_char);

    // [111]
    // nb-double-one-line ::=
    //   nb-double-char*
    re_nb_double_one_line = RegExp(`${nb_double_char}*`, "yu");

    // [114]
    // nb-ns-double-in-line ::=
    //   ( s-white* ns-double-char )*
    re_nb_ns_double_in_line = RegExp(`(?:${s_white}*${ns_double_char})*`, "yu");

    // [117]
    // c-quoted-quote ::=
    //   ''' '''
    c_quoted_quote = r2s(/''/yu);

    // [118]
    // nb-single-char ::=
    //   c-quoted-quote | ( nb-json - ''' )
    nb_single_char = r2s(RegExp(`(?:${c_quoted_quote}|(?:(?!')${nb_json}))`, "yu"));

    // [119]
    // ns-single-char ::=
    //   nb-single-char - s-white
    ns_single_char = r2s(RegExp(`(?:(?!${s_white})${nb_single_char})`, "yu"));

    // [122]
    // nb-single-one-line ::=
    //   nb-single-char*
    re_nb_single_one_line = RegExp(`${nb_single_char}*`, "yu");

    // [123]
    // nb-ns-single-in-line ::=
    //   ( s-white* ns-single-char )*
    re_nb_ns_single_in_line = RegExp(`(?:${s_white}*${ns_single_char})*`, "yu");

    nb_ns_single_in_line = r2s(re_nb_ns_single_in_line);

    // [129]
    // ns-plain-safe-in ::=
    //   ns-char - c-flow-indicator
    re_ns_plain_safe_in = RegExp(`(?:(?!${c_flow_indicator})${ns_char})`, "yu");

    // [142]
    // ns-flow-map-entry(n,c) ::=
    //   ( '?' s-separate(n,c)
    //   ns-flow-map-explicit-entry(n,c) )
    //   | ns-flow-map-implicit-entry(n,c)
    ws_lookahead = r2s(RegExp(`(?=$|${s_white}|${line_break})`, "yu"));

    re_ns_flow_map_entry = RegExp(`\\?${ws_lookahead}`, "yu");

    // [150]
    // ns-flow-pair(n,c) ::=
    //   ( '?' s-separate(n,c)
    //   ns-flow-map-explicit-entry(n,c) )
    //   | ns-flow-pair-entry(n,c)
    re_ns_flow_pair = RegExp(`\\?${ws_lookahead}`, "yu");

    // [203]
    // c-directives-end ::=
    //   '-' '-' '-'
    re_c_directives_end = RegExp(`---(?=$|${s_white}|${line_break})`, "yu");

    c_directives_end = r2s(re_c_directives_end);

    // [204]
    // c-document-end ::=
    //   '.' '.' '.'
    re_c_document_end = /\.\.\./yu;

    c_document_end = r2s(re_c_document_end);

    // [206]
    // c-forbidden ::=
    //   <start_of_line>
    //   ( c-directives-end | c-document-end )
    //   ( b-char | s-white | <end_of_file> )
    re_c_forbidden = RegExp(`(?:${c_directives_end}|${c_document_end})(?:${b_char}|${s_white}|$)`, "yu");

    return Grammar;

  }).call(this);

}).call(this);
